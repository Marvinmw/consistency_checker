{
  "v0": [
    {
      "isImp": false,
      "reason": "",
      "file": "",
      "item": "\n    50% of the SALT Emissions - from the 51 million SALT designated as Emissions. \n    "
    }
  ],
  "v1": [
    {
      "isImp": false,
      "reason": "",
      "file": "",
      "item": "\n    37.5% of the Arbitrage Profits - from profits generated by Automatic Atomic Arbitrage.\n    "
    }
  ],
  "v2": [
    {
      "file": "repo_check/ico/salty/2024-01-salty/src/rewards/SaltRewards.sol",
      "isImp": true,
      "reason": "The contract contains mechanisms that distribute SALT rewards to liquidity pools based on their proportional share in generating recent arbitrage profits, as described in the performUpkeep function.",
      "item": "\n    The arbitrage profits and SALT emissions are distributed to the liquidity pools proportionally based on each pool's contribution to generating arbitrage profit.  If a pool has contributed towards generating 10% of the arbitrage profits, it will receive 10% of the distributed profits and emissions. \n    "
    }
  ],
  "v3": [
    {
      "isImp": false,
      "reason": "",
      "file": "",
      "item": "\n   To reduce the inherent volatility of rewards emissions and make rewards more stable and predictable the rewards are emitted at a default rate of 0.75% per day of the current balance in the emitter (adjustable by the DAO).\n    "
    }
  ],
  "v4": [
    {
      "file": "repo_check/ico/salty/2024-01-salty/src/dao/DAOConfig.sol",
      "isImp": true,
      "reason": "The smart contract does not implement the distribution of rewards to xSALT holders as described. The contract contains definitions and functions that allow DAO parameters to be adjusted, but it does not include any code related to the proportional distribution of rewards to xSALT holders based on their holdings.",
      "item": "\nThe rewards are distributed to xSALT holders proportionally to the percent of xSALT they have compared to the total amount of xSALT that exists.  If a user has 1% of the total xSALT, then they will receive 1% of the rewards.\n    "
    },
    {
      "file": "repo_check/ico/salty/2024-01-salty/src/staking/StakingRewards.sol",
      "isImp": true,
      "reason": "The smart contract indeed implements a proportional reward distribution system based on the user's share of staked tokens relative to the total shares. This is evident from the `userRewardForPool` function, which calculates the reward for a user by determining the share of the rewards for the user based on their deposited share (user's share / total shares) of xSAILT (SALT in the contract).",
      "item": "\nThe rewards are distributed to xSALT holders proportionally to the percent of xSALT they have compared to the total amount of xSALT that exists.  If a user has 1% of the total xSALT, then they will receive 1% of the rewards.\n    "
    }
  ],
  "v5": [
    {
      "file": "repo_check/ico/salty/2024-01-salty/src/dao/DAO.sol",
      "isImp": true,
      "reason": "The smart contract contains a variable named 'bootstrappingRewards' obtained from 'daoConfig.bootstrappingRewards()', which is used when a new token is whitelisted to provide the specified amount of SALT as a bootstrapping reward for the new pool. The provided default value in the description is 200k SALT, which is not explicitly stated in the contract code but is implied to be configurable through the 'daoConfig'.",
      "item": "\n   bootstrappingRewards - the amount of SALT provided as a bootstrapping reward for a new pool when a new token is whitelisted.  Default: 200k SALT\n      "
    },
    {
      "file": "repo_check/ico/salty/2024-01-salty/src/dao/DAOConfig.sol",
      "isImp": true,
      "reason": "The smart contract correctly implements the bootstrappingRewards as described in the whitepaper. The contract sets the default amount to 200,000 ether, which is equivalent to 200k SALT, provided as a bootstrapping reward when a new token is whitelisted.",
      "item": "\n   bootstrappingRewards - the amount of SALT provided as a bootstrapping reward for a new pool when a new token is whitelisted.  Default: 200k SALT\n      "
    },
    {
      "file": "repo_check/ico/salty/2024-01-salty/src/rewards/SaltRewards.sol",
      "isImp": true,
      "reason": "The smart contract code contains a function 'sendInitialSaltRewards' which is intended to distribute initial SALT rewards evenly across all initial pools when bootstrapping liquidity for those pools. However, it does not explicitly state the default amount of 200k SALT for a new pool when a new token is whitelisted. Instead, it divides the given 'liquidityBootstrapAmount' by the number of pools and rewards each pool with an equal share. The default value of 200k SALT is not hardcoded in this function, and this value must be specified when the function is called.",
      "item": "\n   bootstrappingRewards - the amount of SALT provided as a bootstrapping reward for a new pool when a new token is whitelisted.  Default: 200k SALT\n      "
    }
  ],
  "v6": [
    {
      "isImp": false,
      "reason": "",
      "file": "",
      "item": "\npercentRewardsBurned - the percentage of SALT from arbitrage (excluding the upkeep reward) that is burned. Default: 10%\n   "
    }
  ],
  "v7": [
    {
      "file": "repo_check/ico/salty/2024-01-salty/src/dao/DAOConfig.sol",
      "isImp": true,
      "reason": "The smart contract implements the description correctly with the 'baseBallotQuorumPercentTimes1000' variable set to 10,000, representing a default 10% (with a 1000x multiplier as per contract comments) of the total amount of SALT staked for ballot quorum.",
      "item": "\nbaseBallotQuorumPercent - the minimum amount of xSALT required for ballot quorum. Default 10%\n   "
    }
  ],
  "v9": [
    {
      "file": "repo_check/ico/salty/2024-01-salty/src/dao/DAOConfig.sol",
      "isImp": true,
      "reason": "The smart contract implements the 'requiredProposalPercentStake' described in the whitepaper. It is defined with a default value as 'requiredProposalPercentStakeTimes1000' set to '500', which, when divided by the multiplier of 1000, represents 0.50%.",
      "item": "\nrequiredProposalPercentStake - the percent of staked SALT that a user has to have to make a proposal. Default: .50%\n   "
    },
    {
      "file": "repo_check/ico/salty/2024-01-salty/src/dao/Parameters.sol",
      "isImp": true,
      "reason": "The smart contract does contain a setting related to 'requiredProposalPercentStake'. It is found as 'requiredProposalPercentStakeTimes1000' within the ParameterTypes enum and is modified in the _executeParameterChange method under the DAOConfig section. Thus, it implements the functionality to change the required percentage stake for making a proposal as described.",
      "item": "\nrequiredProposalPercentStake - the percent of staked SALT that a user has to have to make a proposal. Default: .50%\n   "
    }
  ],
  "v10": [
    {
      "isImp": false,
      "reason": "",
      "file": "",
      "item": "\npercentRewardsForReserve - the percentage of SALT from arbitrage (excluding the upkeep reward) that is sent to the DAO's reserve. Default: 10%\n   "
    }
  ],
  "v11": [
    {
      "file": "repo_check/ico/salty/2024-01-salty/src/dao/DAOConfig.sol",
      "isImp": true,
      "reason": "The smart contract defines a public uint256 variable 'upkeepRewardPercent' with a default value of 5, which corresponds to the description stating that the default share of the WETH arbitrage profits sent to the DAO that are sent to the caller of DAO.performUpkeep() is 5%.",
      "item": "\nupkeepRewardPercent - the share of the WETH arbitrage profits sent to the DAO that are sent to the caller of DAO.performUpkeep(). Default: 5%\n   "
    }
  ],
  "v13": [
    {
      "isImp": true,
      "reason": "",
      "file": "repo_check/ico/salty/2024-01-salty/src/pools/PoolsConfig.sol",
      "item": "maximumWhitelistedPools - the maximum number of pools that can be whitelisted at any one time. Default: 50"
    }
  ],
  "v14": [
    {
      "file": "repo_check/ico/salty/2024-01-salty/src/dao/Parameters.sol",
      "isImp": true,
      "reason": "The smart contract has an enum ParameterTypes with a value called 'rewardsEmitterDailyPercentTimes1000' which is used within the _executeParameterChange function. This parameter allows the modification of the percentage of rewards distributed daily by linking to a rewardsConfig interface method changeRewardsEmitterDailyPercent, which is assumed to reflect the intended tokenomics as described.",
      "item": "rewardsEmitterDailyPercentTimes1000 - the target daily percent of rewards distributed by the stakingRewardsEmitter and liquidityRewardsEmitter. Default: 1%"
    },
    {
      "file": "repo_check/ico/salty/2024-01-salty/src/rewards/RewardsConfig.sol",
      "isImp": true,
      "reason": "The smart contract has a variable 'rewardsEmitterDailyPercentTimes1000' which is correctly initialized to 1000, equating to the default of 1%.",
      "item": "rewardsEmitterDailyPercentTimes1000 - the target daily percent of rewards distributed by the stakingRewardsEmitter and liquidityRewardsEmitter. Default: 1%"
    }
  ],
  "v15": [
    {
      "file": "repo_check/ico/salty/2024-01-salty/src/dao/Parameters.sol",
      "isImp": true,
      "reason": "The smart contract does implement a function '_executeParameterChange' that has the capability to change the parameter 'emissionsWeeklyPercentTimes1000' through the parameter type of the same name. This matches the description stating the purpose of the parameter being to define the weekly percent of SALT emissions.",
      "item": "emissionsWeeklyPercentTimes1000 - the weekly percent of SALT emissions that will be distributed from the Emissions contract. Default: .5%"
    },
    {
      "file": "repo_check/ico/salty/2024-01-salty/src/rewards/RewardsConfig.sol",
      "isImp": true,
      "reason": "The smart contract has a variable named `emissionsWeeklyPercentTimes1000` which is used to determine the weekly percent of SALT emissions distributed from the Emissions contract. It is initialized with the value of 500, which represents the default value of 0.5% when considering the 1000x multiplier in place.",
      "item": "emissionsWeeklyPercentTimes1000 - the weekly percent of SALT emissions that will be distributed from the Emissions contract. Default: .5%"
    }
  ],
  "v16": [
    {
      "file": "repo_check/ico/salty/2024-01-salty/src/rewards/RewardsConfig.sol",
      "isImp": true,
      "reason": "The smart contract defines 'stakingRewardsPercent' with a default value of 50, matching the description of the percentage of rewards received by SALT stakers (compared to liquidity providers) being default at 50%.",
      "item": "stakingRewardsPercent - the percentage of rewards received by SALT stakers (compared to liquidity providers). Default: 50%"
    }
  ],
  "v19": [
    {
      "file": "repo_check/ico/salty/2024-01-salty/src/staking/StakingConfig.sol",
      "isImp": true,
      "reason": "The smart contract code implements the description provided accurately. The value of the variable 'minUnstakePercent' is set to the default of 20%, which is the percentage of the original staked SALT reclaimable when unstaking the minimum number of weeks.",
      "item": "minUnstakePercent - the percentage of the original staked SALT that is reclaimable when unstaking the minimum number of weeks. Default: 20%"
    }
  ],
  "v21": [
    {
      "isImp": true,
      "reason": "",
      "file": "repo_check/ico/salty/2024-01-salty/src/dao/DAOConfig.sol",
      "item": "In order to incentivize upkeep being done, users calling performUpkeep receive 5% of the arbitrage profits that have been generated since the last call to performUpkeep (rate adjustable by the DAO).  This incentivizes upkeep to be dependent on the activity of the exchange itself."
    }
  ],
  "v22": [
    {
      "file": "repo_check/ico/salty/2024-01-salty/src/dao/Parameters.sol",
      "isImp": true,
      "reason": "The smart contract contains a function '_executeParameterChange' which has a case for 'ParameterTypes.percentPolRewardsBurned'. This suggests that there is a mechanism for setting the percentage of rewards (potentially from arbitrage profits) that are burned, which aligns with the description stating that a default 9.5% of all arbitrage profits in WETH are swapped to SALT and burned.",
      "item": "A default 9.5% of all arbitrage profits (which are generated in WETH) are swapped to SALT and burned."
    }
  ],
  "v24": [
    {
      "file": "repo_check/ico/salty/2024-01-salty/src/launch/InitialDistribution.sol",
      "isImp": true,
      "reason": "The smart contract imports the ERC20 standard and initializes the salt token, which implies that it is an ERC20 token as per the description of the SALT token being an ERC20 utility and governance token.",
      "item": "The SALT token is an ERC20 utility and governance token on Ethereum with a 100 million maximum supply."
    },
    {
      "file": "repo_check/ico/salty/2024-01-salty/src/rewards/RewardsConfig.sol",
      "isImp": true,
      "reason": "The provided smart contract code does not implement tokenomics related to the SALT token's maximum supply or its status as an ERC20 utility and governance token. The contract is focused on the rewards configuration for the SALT token distribution, such as the rewards emitter daily percent, emissions weekly percent, staking rewards percent, and percent rewards for SALT/USDS pool, but it does not handle token supply or token type specifications.",
      "item": "The SALT token is an ERC20 utility and governance token on Ethereum with a 100 million maximum supply."
    }
  ]
}