{
  "\n    50% of the SALT Emissions - from the 51 million SALT designated as Emissions. \n    ": [
    {
      "file": "repo_check/ico/salty/2024-01-salty/src/dao/DAO.sol",
      "isImp": false,
      "reason": "The provided smart contract code does not contain any explicit logic for handling '50% of the SALT Emissions - from the 51 million SALT designated as Emissions' as stated in the description. The contract is a DAO governance contract with functions related to proposing, voting, and executing governance actions. It does include events related to token transactions and interactions with protocols owned liquidity, rewards, and liquidizer functions. However, there is no mention of specific tokenomic rules or allocations of SALT emissions in the code provided."
    },
    {
      "file": "repo_check/ico/salty/2024-01-salty/src/dao/DAOConfig.sol",
      "isImp": false,
      "reason": "The provided Smart Contract does not include any specific functionality or parameters related to the '51 million SALT designated as Emissions' or the allocation of '50% of the SALT Emissions.' The contract focuses on configurable parameters for DAO governance such as bootstrapping rewards, percent of POL rewards burned, ballot quorum percentages, and other related settings, without direct mention of emission allocations."
    },
    {
      "file": "repo_check/ico/salty/2024-01-salty/src/dao/Parameters.sol",
      "isImp": false,
      "reason": "The provided smart contract code does not include any specific logic or definitions that implement or refer to a mechanism for distributing 50% of SALT emissions from a designated amount of 51 million SALT tokens."
    },
    {
      "file": "repo_check/ico/salty/2024-01-salty/src/launch/Airdrop.sol",
      "isImp": false,
      "reason": "The provided smart contract code does not include any implementation or reference to the specific tokenomic feature of distributing '50% of the SALT Emissions - from the 51 million SALT designated as Emissions.'"
    },
    {
      "file": "repo_check/ico/salty/2024-01-salty/src/launch/BootstrapBallot.sol",
      "isImp": false,
      "reason": "The provided smart contract does not contain any functionality or reference regarding 'SALT Emissions' or the distribution of the 51 million SALT designated as Emissions mentioned in the whitepaper."
    },
    {
      "file": "repo_check/ico/salty/2024-01-salty/src/launch/InitialDistribution.sol",
      "isImp": false,
      "reason": "The smart contract transfers 52 million SALT to emissions which contradicts the whitepaper's description of allocating 50% of the 51 million SALT designated as Emissions."
    },
    {
      "file": "repo_check/ico/salty/2024-01-salty/src/rewards/RewardsConfig.sol",
      "isImp": false,
      "reason": "The provided smart contract code does not specify any allocations of the SALT Emissions from a designated amount, such as the mentioned 51 million SALT. It only includes methods to adjust the percentages for rewards distribution and emissions weekly percent but does not define or enforce the overall allocation from a total designated emissions pool."
    },
    {
      "file": "repo_check/ico/salty/2024-01-salty/src/rewards/RewardsEmitter.sol",
      "isImp": false,
      "reason": "The provided smart contract doesn't include any specific percentages related to the SALT emissions or the allocation from the designated 51 million SALT. It sets up a mechanism for adding and distributing rewards, including a gradual emission rate mechanism, but does not mention specific tokenomic percentages."
    },
    {
      "file": "repo_check/ico/salty/2024-01-salty/src/rewards/SaltRewards.sol",
      "isImp": "",
      "reason": ""
    },
    {
      "file": "repo_check/ico/salty/2024-01-salty/src/staking/StakingConfig.sol",
      "isImp": false,
      "reason": "The provided smart contract does not contain any mention or implementation related to 'SALT Emissions' or the allocation of '51 million SALT designated as Emissions'. The contract appears to govern staking parameters such as the minimum and maximum unstake weeks and percentages, as well as the cooldown for modification of shares in SharedRewards contracts, but it does not address token emission details or related distribution logic."
    },
    {
      "file": "repo_check/ico/salty/2024-01-salty/src/staking/StakingRewards.sol",
      "isImp": false,
      "reason": "The smart contract does not include a definition or allocation for '50% of the SALT Emissions' from the designated 51 million SALT as described."
    }
  ],
  "\n    37.5% of the Arbitrage Profits - from profits generated by Automatic Atomic Arbitrage.\n    ": [
    {
      "file": "repo_check/ico/salty/2024-01-salty/src/dao/DAO.sol",
      "isImp": false,
      "reason": "The smart contract DAO does not implement the specific tokenomics of distributing 37.5% of the Arbitrage Profits as described. Instead, it includes a function 'withdrawArbitrageProfits', which allows withdrawing WETH arbitrage profits deposited in the Pools contract and sending them to the caller (Upkeep contract), but does not specify a particular percentage distribution of the profits."
    },
    {
      "file": "repo_check/ico/salty/2024-01-salty/src/dao/DAOConfig.sol",
      "isImp": false,
      "reason": "The smart contract specifies that the 'arbitrageProfitsPercentPOL' defines the share of the WETH arbitrage profits that are sent to the DAO, and it is set to 20%. This does not match the 37.5% described in the whitepaper."
    },
    {
      "file": "repo_check/ico/salty/2024-01-salty/src/dao/Parameters.sol",
      "isImp": false,
      "reason": "The smart contract provided does not include any logic or reference for distributing 37.5% of Arbitrage Profits from Automatic Atomic Arbitrage."
    },
    {
      "file": "repo_check/ico/salty/2024-01-salty/src/launch/Airdrop.sol",
      "isImp": false,
      "reason": "The provided smart contract does not implement any features related to arbitrage profits or their distribution. The contract specifically deals with the Airdrop for users who qualify by participating in specific DeFi protocol activities and complies with certain actions such as retweeting and voting."
    },
    {
      "file": "repo_check/ico/salty/2024-01-salty/src/launch/BootstrapBallot.sol",
      "isImp": false,
      "reason": "The provided smart contract code primarily pertains to a BootstrapBallot mechanism for voting on the initiation of an exchange and for setting initial geographic restrictions. It does not contain any functionality or reference to handling or distributing Arbitrage Profits, nor does it mention a mechanism for Automatic Atomic Arbitrage."
    },
    {
      "file": "repo_check/ico/salty/2024-01-salty/src/launch/InitialDistribution.sol",
      "isImp": false,
      "reason": "The contract does not implement any feature related to distributing a percentage of arbitrage profits or any functions related to Automatic Atomic Arbitrage."
    },
    {
      "file": "repo_check/ico/salty/2024-01-salty/src/rewards/RewardsConfig.sol",
      "isImp": false,
      "reason": "The provided smart contract does not implement or reference any functionality related to the distribution of Arbitrage Profits from profits generated by Automatic Atomic Arbitrage, nor does it mention any percentage distribution such as 37.5%. The contract only deals with the modification of reward percentages and distributions related to the SALT rewards and does not cover Arbitrage Profits distribution."
    },
    {
      "file": "repo_check/ico/salty/2024-01-salty/src/rewards/RewardsEmitter.sol",
      "isImp": false,
      "reason": "The provided Smart Contract code does not mention or calculate any arbitrage profits or distribution of such profits."
    },
    {
      "file": "repo_check/ico/salty/2024-01-salty/src/rewards/SaltRewards.sol",
      "isImp": false,
      "reason": "The smart contract provided does not contain any specific logic to handle the distribution of 37.5% of the Arbitrage Profits as described. It has a function 'performUpkeep' which distributes all the SALT rewards currently in the contract. The distribution splits the rewards between the stakingRewardsEmitter and liquidityRewardsEmitter, and there is handling for direct rewards to the SALT/USDS pool as well as rewards proportional to arbitrage profits generated by each pool. However, the contract lacks explicit logic indicating that exactly 37.5% of the arbitrage profits are used, so it does not implement the description provided."
    },
    {
      "file": "repo_check/ico/salty/2024-01-salty/src/staking/StakingConfig.sol",
      "isImp": false,
      "reason": "The provided smart contract code is specifically for a Staking Configuration contract and does not mention or implement any functionality related to distributing or handling Arbitrage Profits from Automatic Atomic Arbitrage. There is no code or mechanism within this contract that distributes or calculates profits or any kind of returns from arbitrage or other activities."
    },
    {
      "file": "repo_check/ico/salty/2024-01-salty/src/staking/StakingRewards.sol",
      "isImp": false,
      "reason": "The provided smart contract code does not contain any logic or references to Arbitrage Profits or distribution of such profits. It appears to be a staking contract focused on rewards distribution through the staking of SALT tokens and does not implement tokenomics tied to the distribution of Arbitrage Profits."
    }
  ],
  "\n    The arbitrage profits and SALT emissions are distributed to the liquidity pools proportionally based on each pool's contribution to generating arbitrage profit.  If a pool has contributed towards generating 10% of the arbitrage profits, it will receive 10% of the distributed profits and emissions. \n    ": [
    {
      "file": "repo_check/ico/salty/2024-01-salty/src/dao/DAO.sol",
      "isImp": false,
      "reason": "The smart contract does not contain specific mechanisms or functions that implement a proportional distribution of arbitrage profits and SALT emissions based on each pool's contribution to generating arbitrage profit. Arbitrage profits seem to be collected and handled through the 'withdrawArbitrageProfits' method, which sends the entire amount to the Upkeep contract without an allocation system based on pool contributions."
    },
    {
      "file": "repo_check/ico/salty/2024-01-salty/src/dao/DAOConfig.sol",
      "isImp": false,
      "reason": "The provided smart contract DAOConfig relates to the configuration of DAO parameters and does not handle the distribution of arbitrage profits and SALT emissions to liquidity pools. The contract includes functions to change various DAO settings including bootstrapping rewards, percent of Protocol Owned Liquidity (POL) rewards burned, ballot quorum percentages, ballot durations, stake requirements for proposals, pending token limits for whitelisting, percentages of WETH arbitrage profits sent to the DAO and the upkeep reward percent. However, it contains no functionality related to distributing profits and emissions to liquidity pools based on their contribution to generating arbitrage profit as described in the whitepaper."
    },
    {
      "file": "repo_check/ico/salty/2024-01-salty/src/dao/Parameters.sol",
      "isImp": false,
      "reason": "The smart contract code does not contain a mechanism for tracking pool contributions to arbitrage profits or distributing arbitrage profits and SALT emissions proportionally based on those contributions."
    },
    {
      "file": "repo_check/ico/salty/2024-01-salty/src/launch/Airdrop.sol",
      "isImp": false,
      "reason": "The smart contract provided does not implement the functionality described. It is focused on managing an airdrop mechanism for users who are authorized by retweeting the launch announcement and voting, rather than distributing arbitrage profits and SALT emissions to liquidity pools based on their contribution to generating arbitrage profit."
    },
    {
      "file": "repo_check/ico/salty/2024-01-salty/src/launch/BootstrapBallot.sol",
      "isImp": false,
      "reason": "The provided Smart Contract does not mention or implement any logic related to the distribution of arbitrage profits and SALT emissions to liquidity pools based on the pool's contribution to generating arbitrage profits. The contract is focused on voting for the start-up of an exchange and has no methods or variables concerning profit distribution or liquidity pool contributions."
    },
    {
      "file": "repo_check/ico/salty/2024-01-salty/src/launch/InitialDistribution.sol",
      "isImp": false,
      "reason": "The provided smart contract does not include any functionality related to the proportional distribution of arbitrage profits and SALT emissions to liquidity pools based on each pool's contribution to generating arbitrage profit. Instead, it only shows initial distribution logic upon approval from the BootstrapBallot, which includes allocations to Emissions, DAO Reserve Vesting Wallet, Initial Development Team Vesting Wallet, Airdrop Participants, Liquidity Bootstrapping, and Staking Bootstrapping, with no mechanism described for calculating and distributing profits or emissions based on pool contributions."
    },
    {
      "file": "repo_check/ico/salty/2024-01-salty/src/rewards/RewardsConfig.sol",
      "isImp": false,
      "reason": "The smart contract does not contain any logic or references to distribute arbitrage profits or SALT emissions based on each pool's contribution to generating arbitrage profit. Instead, it defines static percentages for rewards distribution with no mention of dynamic allocation based on contributions."
    },
    {
      "file": "repo_check/ico/salty/2024-01-salty/src/rewards/RewardsEmitter.sol",
      "isImp": false,
      "reason": "Contrary to the description, the smart contract distributes SALT rewards based on a fixed 1% daily rate to whitelisted pools and does not consider each pool's contribution to generating arbitrage profit. The distribution is instead performed by the `performUpkeep` function, which sends a percentage of pending rewards to pools based on the time elapsed since the last distribution, not based on each pool's contribution to arbitrage profits."
    },
    {
      "file": "repo_check/ico/salty/2024-01-salty/src/rewards/SaltRewards.sol",
      "isImp": true,
      "reason": "The contract contains mechanisms that distribute SALT rewards to liquidity pools based on their proportional share in generating recent arbitrage profits, as described in the performUpkeep function."
    },
    {
      "file": "repo_check/ico/salty/2024-01-salty/src/staking/StakingConfig.sol",
      "isImp": false,
      "reason": "The provided smart contract StakingConfig does not include any functionality related to the distribution of arbitrage profits or SALT emissions to liquidity pools based on their contribution to generating arbitrage profit. The contract primarily handles the configuration for unstaking periods and percent, as well as a cooldown modification for unstaking actions."
    },
    {
      "file": "repo_check/ico/salty/2024-01-salty/src/staking/StakingRewards.sol",
      "isImp": false,
      "reason": "The provided smart contract does not implement profit distribution based on each pool's contribution to generating profit. It only allows users to stake SALT tokens or liquidity shares to earn rewards proportional to their stake in the pool, which does not consider the pool's arbitrage profit contribution."
    }
  ],
  "\n   To reduce the inherent volatility of rewards emissions and make rewards more stable and predictable the rewards are emitted at a default rate of 0.75% per day of the current balance in the emitter (adjustable by the DAO).\n    ": [
    {
      "file": "repo_check/ico/salty/2024-01-salty/src/dao/DAO.sol",
      "isImp": false,
      "reason": "The provided smart contract code does not define or mention a rewards emission rate or mechanism related to a daily percentage of the current balance in the emitter. There is no explicit functionality that implements or adjusts a daily emission rate for rewards as described in the whitepaper."
    },
    {
      "file": "repo_check/ico/salty/2024-01-salty/src/dao/DAOConfig.sol",
      "isImp": false,
      "reason": "The smart contract does not contain any implementation related to rewards emission at a rate of 0.75% per day, which is adjustable by the DAO, as described in the tokenomics section of the whitepaper."
    },
    {
      "file": "repo_check/ico/salty/2024-01-salty/src/dao/Parameters.sol",
      "isImp": false,
      "reason": "The smart contract contains a mechanism for changing the rewards emission rate, but it does not explicitly confirm a default emission rate of 0.75% per day or demonstrate the DAO's capability to adjust it."
    },
    {
      "file": "repo_check/ico/salty/2024-01-salty/src/launch/Airdrop.sol",
      "isImp": false,
      "reason": "The provided smart contract describes an airdrop mechanism where a fixed amount of SALT tokens are distributed to authorized users who are allowed to claim after certain conditions are met. The contract does not mention or implement any logic related to emitting rewards at a rate of 0.75% per day of the current balance in the emitter, nor does it suggest adjustability by a DAO. The emission mechanism described in the whitepaper appears to relate to a reward emission system, whereas the smart contract is focused on facilitating a one-time airdrop event for qualified participants."
    },
    {
      "file": "repo_check/ico/salty/2024-01-salty/src/launch/BootstrapBallot.sol",
      "isImp": false,
      "reason": "The contract code provided does not implement the function or mechanism related to the emission of rewards at a default rate nor any adjustable rate by the DAO. The contract is for a Bootstrap Ballot system used to authorize the start of the exchange and airdrop authorization. It does not handle rewards emissions or specify any parameters related to issuing tokens at a certain rate."
    },
    {
      "file": "repo_check/ico/salty/2024-01-salty/src/launch/InitialDistribution.sol",
      "isImp": false,
      "reason": "The smart contract does not define an emission rate of 0.75% per day for rewards, nor does it include any logic indicating that this rate is adjustable by the DAO. The mentioned functionality is not present in the given contract code."
    },
    {
      "file": "repo_check/ico/salty/2024-01-salty/src/rewards/RewardsConfig.sol",
      "isImp": false,
      "reason": "The smart contract defines a default rewards emission rate at 1.0% per day, not 0.75% as stated in the whitepaper. The `rewardsEmitterDailyPercentTimes1000` is set to 1000, which represents 1.0% with a 1000x multiplier."
    },
    {
      "file": "repo_check/ico/salty/2024-01-salty/src/rewards/RewardsEmitter.sol",
      "isImp": false,
      "reason": "The smart contract specifies a default rate of 1% per day for rewards emission, contradicting the document's description of a 0.75% per day emission rate."
    },
    {
      "file": "repo_check/ico/salty/2024-01-salty/src/rewards/SaltRewards.sol",
      "isImp": false,
      "reason": "The smart contract does not directly implement the described emission rate of 0.75% per day or include functionality for the DAO to adjust the rate. The emission logic may be implemented in associated contracts or external mechanisms not included in the provided code."
    },
    {
      "file": "repo_check/ico/salty/2024-01-salty/src/staking/StakingConfig.sol",
      "isImp": false,
      "reason": "The provided smart contract code implements a staking configuration system, with parameters such as minimum and maximum unstake weeks, a minimum unstake percentage, and a modification cooldown. However, it does not contain any functionality related to the rewards emission rate or the current balance in an emitter, nor does it mention a 0.75% per day default rate, which is described in the whitepaper. Therefore, this contract does not implement the described tokenomics regarding rewards emissions."
    },
    {
      "file": "repo_check/ico/salty/2024-01-salty/src/staking/StakingRewards.sol",
      "isImp": false,
      "reason": "The described tokenomics from the whitepaper are not implemented because the smart contract code indicates the default rewards emission rate is 1% per day, not the 0.75% per day as described in the whitepaper."
    }
  ],
  "\nThe rewards are distributed to xSALT holders proportionally to the percent of xSALT they have compared to the total amount of xSALT that exists.  If a user has 1% of the total xSALT, then they will receive 1% of the rewards.\n    ": [
    {
      "file": "repo_check/ico/salty/2024-01-salty/src/dao/DAO.sol",
      "isImp": false,
      "reason": "The smart contract provided does not include a tokenomics implementation for distributing rewards to xSALT holders proportionally based on their holdings. The contract includes various functionalities related to DAO operations, parameter changes, liquidity pool management, and more, but it does not describe or contain functions that specifically address the distribution of rewards to xSALT holders as stated in the whitepaper description."
    },
    {
      "file": "repo_check/ico/salty/2024-01-salty/src/dao/DAOConfig.sol",
      "isImp": true,
      "reason": "The smart contract does not implement the distribution of rewards to xSALT holders as described. The contract contains definitions and functions that allow DAO parameters to be adjusted, but it does not include any code related to the proportional distribution of rewards to xSALT holders based on their holdings."
    },
    {
      "file": "repo_check/ico/salty/2024-01-salty/src/dao/Parameters.sol",
      "isImp": "",
      "reason": ""
    },
    {
      "file": "repo_check/ico/salty/2024-01-salty/src/launch/Airdrop.sol",
      "isImp": false,
      "reason": "The Smart Contract's 'claimAirdrop' function distributes a fixed amount of xSALT (staked SALT) to each authorized user regardless of the percent of total xSALT they hold, contradicting the description which states that rewards are distributed proportionally to the percent of xSALT held by each user."
    },
    {
      "file": "repo_check/ico/salty/2024-01-salty/src/launch/BootstrapBallot.sol",
      "isImp": false,
      "reason": "The provided smart contract appears to focus on voting logic for starting an exchange and initial distribution, it does not contain functionality related to rewards distribution to xSALT holders proportional to their token holdings."
    },
    {
      "file": "repo_check/ico/salty/2024-01-salty/src/launch/InitialDistribution.sol",
      "isImp": false,
      "reason": "The smart contract provided does not implement the described tokenomics of proportionate reward distribution to xSALT holders. It only defines an initial distribution mechanism to various parties including emissions, DAO vesting wallet, initial development team vesting wallet, and airdrop participants."
    },
    {
      "file": "repo_check/ico/salty/2024-01-salty/src/rewards/RewardsConfig.sol",
      "isImp": false,
      "reason": "The provided smart contract code defines the structure and logic for changing the parameters of reward distribution, but does not include any mechanisms or functions that directly implement the actual distribution of rewards proportional to xSALT holdings."
    },
    {
      "file": "repo_check/ico/salty/2024-01-salty/src/rewards/RewardsEmitter.sol",
      "isImp": false,
      "reason": "The RewardsEmitter smart contract stores and handles the distribution of SALT rewards to different contracts, presumably for xSALT holders, among others. However, it does not directly implement the proportional distribution of rewards to xSALT holders based on their percentage of total xSALT supply. The proportion is calculated in the StakingRewards contract which is not provided, and this mechanism isn't present in the RewardsEmitter contract code itself."
    },
    {
      "file": "repo_check/ico/salty/2024-01-salty/src/rewards/SaltRewards.sol",
      "isImp": false,
      "reason": "The provided smart contract code does not show any direct implementation detail related to the distribution of rewards to xSALT holders based on the percentage of xSALT they own compared to the total amount of xSALT that exists. The contract mainly handles the distribution of SALT rewards to various pools and stakingRewardsEmitter based on profits from arbitrage and direct rewards. It does not indicate a mechanism for calculating individual xSALT holder rewards directly within the provided code."
    },
    {
      "file": "repo_check/ico/salty/2024-01-salty/src/staking/StakingConfig.sol",
      "isImp": false,
      "reason": "The provided smart contract code does not contain any logic or functions related to the distribution of rewards to xSALT holders. It solely deals with staking configuration parameters such as minimum and maximum unstake weeks, the minimum unstake percent, and the modification cooldown. Therefore, it does not implement the tokenomic feature described in the whitepaper regarding the proportional distribution of rewards based on the percentage of xSALT held."
    },
    {
      "file": "repo_check/ico/salty/2024-01-salty/src/staking/StakingRewards.sol",
      "isImp": true,
      "reason": "The smart contract indeed implements a proportional reward distribution system based on the user's share of staked tokens relative to the total shares. This is evident from the `userRewardForPool` function, which calculates the reward for a user by determining the share of the rewards for the user based on their deposited share (user's share / total shares) of xSAILT (SALT in the contract)."
    }
  ],
  "\n   bootstrappingRewards - the amount of SALT provided as a bootstrapping reward for a new pool when a new token is whitelisted.  Default: 200k SALT\n      ": [
    {
      "file": "repo_check/ico/salty/2024-01-salty/src/dao/DAO.sol",
      "isImp": true,
      "reason": "The smart contract contains a variable named 'bootstrappingRewards' obtained from 'daoConfig.bootstrappingRewards()', which is used when a new token is whitelisted to provide the specified amount of SALT as a bootstrapping reward for the new pool. The provided default value in the description is 200k SALT, which is not explicitly stated in the contract code but is implied to be configurable through the 'daoConfig'."
    },
    {
      "file": "repo_check/ico/salty/2024-01-salty/src/dao/DAOConfig.sol",
      "isImp": true,
      "reason": "The smart contract correctly implements the bootstrappingRewards as described in the whitepaper. The contract sets the default amount to 200,000 ether, which is equivalent to 200k SALT, provided as a bootstrapping reward when a new token is whitelisted."
    },
    {
      "file": "repo_check/ico/salty/2024-01-salty/src/dao/Parameters.sol",
      "isImp": false,
      "reason": "The smart contract provides an interface for changing a parameter labeled 'bootstrappingRewards', but there is no implementation or default value setting for the amount of SALT provided as a bootstrapping reward, such as the 200k SALT mentioned in the description."
    },
    {
      "file": "repo_check/ico/salty/2024-01-salty/src/launch/Airdrop.sol",
      "isImp": false,
      "reason": "The provided smart contract code does not implement the logic for handling bootstrapping rewards for new pools when a new token is whitelisted. The contract's functions and variables are related to handling airdrops for authorized users, tracking and allowing claims, and staking operations. There is no mention of whitelisting new tokens or distributing a default amount of 200k SALT as bootstrapping rewards for new pools."
    },
    {
      "file": "repo_check/ico/salty/2024-01-salty/src/launch/BootstrapBallot.sol",
      "isImp": false,
      "reason": "The provided smart contract does not contain any implementation or reference to the concept of bootstrappingRewards or distributing SALT tokens to new pools when a new token is whitelisted."
    },
    {
      "file": "repo_check/ico/salty/2024-01-salty/src/launch/InitialDistribution.sol",
      "isImp": false,
      "reason": "The InitialDistribution smart contract does not explicitly implement a bootstrapping reward for a new pool when a new token is whitelisted with a default amount of 200k SALT, as described in the whitepaper."
    },
    {
      "file": "repo_check/ico/salty/2024-01-salty/src/rewards/RewardsConfig.sol",
      "isImp": false,
      "reason": "The smart contract does not implement a bootstrapping reward mechanism for new pools when a new token is whitelisted."
    },
    {
      "file": "repo_check/ico/salty/2024-01-salty/src/rewards/RewardsEmitter.sol",
      "isImp": false,
      "reason": "The code provided does not implement 'bootstrappingRewards' as described. The smart contract manages SALT token distribution to whitelisted pools and handles the gradual emission of rewards. However, no specific logic or value setting for a default bootstrapping reward of 200k SALT for new pools upon token whitelisting is found in the contract."
    },
    {
      "file": "repo_check/ico/salty/2024-01-salty/src/rewards/SaltRewards.sol",
      "isImp": true,
      "reason": "The smart contract code contains a function 'sendInitialSaltRewards' which is intended to distribute initial SALT rewards evenly across all initial pools when bootstrapping liquidity for those pools. However, it does not explicitly state the default amount of 200k SALT for a new pool when a new token is whitelisted. Instead, it divides the given 'liquidityBootstrapAmount' by the number of pools and rewards each pool with an equal share. The default value of 200k SALT is not hardcoded in this function, and this value must be specified when the function is called."
    },
    {
      "file": "repo_check/ico/salty/2024-01-salty/src/staking/StakingConfig.sol",
      "isImp": false,
      "reason": "The smart contract provided does not implement any functionality or parameter related to bootstrapping rewards for a new pool when a new token is whitelisted; it only defines parameters for staking configuration, such as minUnstakeWeeks, maxUnstakeWeeks, minUnstakePercent, and modificationCooldown."
    },
    {
      "file": "repo_check/ico/salty/2024-01-salty/src/staking/StakingRewards.sol",
      "isImp": false,
      "reason": "The provided smart contract code does not mention or implement bootstrapping rewards for new pools when a new token is whitelisted."
    }
  ],
  "\npercentRewardsBurned - the percentage of SALT from arbitrage (excluding the upkeep reward) that is burned. Default: 10%\n   ": [
    {
      "file": "repo_check/ico/salty/2024-01-salty/src/dao/DAO.sol",
      "isImp": false,
      "reason": "The contract contains no explicit reference to a 'percentRewardsBurned' variable or a functionality that burns a percentage of SALT tokens from arbitrage (excluding the upkeep reward). The contract contains 'processRewardsFromPOL' function which describes burning a default 50% of the remaining SALT claimed from Protocol Owned Liquidity (POL), but this does not align with the 'percentRewardsBurned' described in the whitepaper defaulting to 10%."
    },
    {
      "file": "repo_check/ico/salty/2024-01-salty/src/dao/DAOConfig.sol",
      "isImp": false,
      "reason": "The smart contract does not implement the 'percentRewardsBurned' that burns a percentage of SALT from arbitrage as described by the whitepaper. It instead specifies 'percentPolRewardsBurned' which governs the percentage of SALT burned from rewards distributed to the DAO, with a default of 50%."
    },
    {
      "file": "repo_check/ico/salty/2024-01-salty/src/dao/Parameters.sol",
      "isImp": false,
      "reason": "The smart contract provided does not have a direct implementation or mention of 'percentRewardsBurned' parameter or functionality that represents the burning of a percentage of SALT from arbitrage as described in the whitepaper."
    },
    {
      "file": "repo_check/ico/salty/2024-01-salty/src/launch/Airdrop.sol",
      "isImp": false,
      "reason": "The provided smart contract does not implement any functionality related to the burning of a percentage of SALT from arbitrage as described in the tokenomics whitepaper. The contract appears to be focused on managing an airdrop, authorizing users, and allowing them to claim staked SALT, but no mention of arbitrage or burning of tokens is present in the code."
    },
    {
      "file": "repo_check/ico/salty/2024-01-salty/src/launch/BootstrapBallot.sol",
      "isImp": false,
      "reason": "The provided 'BootstrapBallot' smart contract does not implement any functionality related to 'percentRewardsBurned' or the burning of SALT tokens. The contract is focused on voting to start up the exchange and establishing initial geo restrictions, without any reference to token burning mechanisms."
    },
    {
      "file": "repo_check/ico/salty/2024-01-salty/src/launch/InitialDistribution.sol",
      "isImp": false,
      "reason": "The smart contract does not implement any functionality related to burning a percentage of SALT tokens from arbitrage as described in the provided whitepaper tokenomics."
    },
    {
      "file": "repo_check/ico/salty/2024-01-salty/src/rewards/RewardsConfig.sol",
      "isImp": false,
      "reason": "The provided smart contract code does not implement a variable or functionality related to the 'percentRewardsBurned' parameter described in the whitepaper, which specifies the percentage of SALT from arbitrage that is burned. There is no mention of burning nor a variable reflecting this parameter in the contract."
    },
    {
      "file": "repo_check/ico/salty/2024-01-salty/src/rewards/RewardsEmitter.sol",
      "isImp": false,
      "reason": "The given smart contract does not implement any token burning functionality. It focuses on distribution of SALT rewards to participants in a staking or liquidity pool, with a mechanism to transfer a default of 1% per day to the specified StakingRewards pools but does not mention or handle any burning of tokens."
    },
    {
      "file": "repo_check/ico/salty/2024-01-salty/src/rewards/SaltRewards.sol",
      "isImp": false,
      "reason": "The provided smart contract does not implement functionality for burning a percentage of SALT from arbitrage profits as described. The contract does implement mechanisms for distributing SALT rewards to liquidity and staking pools, but it lacks any reference to burning tokens."
    },
    {
      "file": "repo_check/ico/salty/2024-01-salty/src/staking/StakingConfig.sol",
      "isImp": false,
      "reason": "The smart contract code provided does not implement any functionality related to percentRewardsBurned or the burning of SALT from arbitrage."
    },
    {
      "file": "repo_check/ico/salty/2024-01-salty/src/staking/StakingRewards.sol",
      "isImp": false,
      "reason": "The smart contract provided does not implement any functionality to burn a percentage of SALT tokens from arbitrage as described in the whitepaper's tokenomics section."
    }
  ],
  "\nbaseBallotQuorumPercent - the minimum amount of xSALT required for ballot quorum. Default 10%\n   ": [
    {
      "file": "repo_check/ico/salty/2024-01-salty/src/dao/DAO.sol",
      "isImp": false,
      "reason": "The smart contract provided does not contain a variable or parameter related to 'baseBallotQuorumPercent' or any quorum related logic."
    },
    {
      "file": "repo_check/ico/salty/2024-01-salty/src/dao/DAOConfig.sol",
      "isImp": true,
      "reason": "The smart contract implements the description correctly with the 'baseBallotQuorumPercentTimes1000' variable set to 10,000, representing a default 10% (with a 1000x multiplier as per contract comments) of the total amount of SALT staked for ballot quorum."
    },
    {
      "file": "repo_check/ico/salty/2024-01-salty/src/dao/Parameters.sol",
      "isImp": false,
      "reason": "The smart contract does not directly implement the 'baseBallotQuorumPercent' with a default value of 10% as described. The contract includes a 'baseBallotQuorumPercentTimes1000' parameter type, which indicates a scalable percent value, but doesn't define a default value within the given code."
    },
    {
      "file": "repo_check/ico/salty/2024-01-salty/src/launch/Airdrop.sol",
      "isImp": false,
      "reason": "The provided Smart Contract code does not contain any functionality or property corresponding to 'baseBallotQuorumPercent' or a related quorum percentage mechanism. The contract appears focused on handling airdrops after authorization and does not implement voting or ballot quorum logic."
    },
    {
      "file": "repo_check/ico/salty/2024-01-salty/src/launch/BootstrapBallot.sol",
      "isImp": false,
      "reason": "The 'BootstrapBallot' contract does not implement 'baseBallotQuorumPercent' or any similar quorum-related logic to check for a minimum percentage of votes required."
    },
    {
      "file": "repo_check/ico/salty/2024-01-salty/src/launch/InitialDistribution.sol",
      "isImp": false,
      "reason": "The provided smart contract does not contain any reference to 'baseBallotQuorumPercent' or handling of a quorum threshold for ballots, so it does not implement this specific tokenomics description from the whitepaper."
    },
    {
      "file": "repo_check/ico/salty/2024-01-salty/src/rewards/RewardsConfig.sol",
      "isImp": false,
      "reason": "The tokenomics described as 'baseBallotQuorumPercent' with a default value of '10%' for the minimum amount of xSALT required for ballot quorum is not implemented in the given smart contract. The contract code provided does not contain any variable or function related to 'baseBallotQuorumPercent' or handling quorum for ballots."
    },
    {
      "file": "repo_check/ico/salty/2024-01-salty/src/rewards/RewardsEmitter.sol",
      "isImp": false,
      "reason": "The provided smart contract code does not contain any implementation or reference to a 'baseBallotQuorumPercent' or any form of quorum requirement for ballots. The contract is a RewardsEmitter, which handles the distribution of rewards to staking or liquidity pools, not governance or voting mechanisms."
    },
    {
      "file": "repo_check/ico/salty/2024-01-salty/src/rewards/SaltRewards.sol",
      "isImp": false,
      "reason": "The smart contract code provided does not contain any references to 'baseBallotQuorumPercent' or functionality related to the quorum for votes, such as a ballot system or the minimum amount of tokens (xSALT) required for quorum. Therefore, the description about tokenomics related to quorum for voting is not implemented in this smart contract."
    },
    {
      "file": "repo_check/ico/salty/2024-01-salty/src/staking/StakingConfig.sol",
      "isImp": false,
      "reason": "The smart contract provided does not implement or mention 'baseBallotQuorumPercent' as described. The parameters and functions in the contract are related to staking configuration, such as minUnstakeWeeks, maxUnstakeWeeks, minUnstakePercent, and modificationCooldown, not to ballot quorum configuration."
    },
    {
      "file": "repo_check/ico/salty/2024-01-salty/src/staking/StakingRewards.sol",
      "isImp": false,
      "reason": "The provided smart contract code does not contain any reference or implementation of a 'baseBallotQuorumPercent' or any other mechanism related to voting, ballots, or quorums for ballots."
    }
  ],
  "\nballotMinimumDuration - how many days minimum a ballot has to exist before it can be taken action on. Default: 10 days\n   ": [
    {
      "file": "repo_check/ico/salty/2024-01-salty/src/dao/DAO.sol",
      "isImp": false,
      "reason": "The smart contract provided does not define or mention a 'ballotMinimumDuration' parameter within its code, nor does it specify a default duration of 10 days for a ballot."
    },
    {
      "file": "repo_check/ico/salty/2024-01-salty/src/dao/DAOConfig.sol",
      "isImp": true,
      "reason": "The smart contract has a parameter named ballotMinimumDuration, which is set to a default value of 10 days, matching the description provided."
    },
    {
      "file": "repo_check/ico/salty/2024-01-salty/src/dao/Parameters.sol",
      "isImp": false,
      "reason": "The smart contract does not implement the described tokenomic feature 'ballotMinimumDuration.' The contract contains a 'ballotDuration' parameter under ParameterTypes within the _executeParameterChange function, but it does not specify a default duration nor does it mention a minimum number of days. Therefore, the contract does not match the description provided in the whitepaper."
    },
    {
      "file": "repo_check/ico/salty/2024-01-salty/src/launch/Airdrop.sol",
      "isImp": false,
      "reason": "The smart contract provided doesn't reference or implement a 'ballotMinimumDuration' variable or a concept of a minimum number of days before a ballot can be actioned. The code focuses on the management of an airdrop, authorizing wallets, and allowing claims of staked SALT tokens, without any time-based conditions for ballots."
    },
    {
      "file": "repo_check/ico/salty/2024-01-salty/src/launch/BootstrapBallot.sol",
      "isImp": false,
      "reason": "The smart contract specifies a 'ballotDuration' that must be passed to the constructor, which sets the 'completionTimestamp'. However, it does not enforce or specify a 'ballotMinimumDuration' of 10 days as described in the whitepaper."
    },
    {
      "file": "repo_check/ico/salty/2024-01-salty/src/launch/InitialDistribution.sol",
      "isImp": false,
      "reason": "The smart contract does not contain any mechanism or variable that defines a minimum duration for a ballot or any default values related to the duration of ballots. The provided contract only includes token distribution logic without any reference to the duration of ballots."
    },
    {
      "file": "repo_check/ico/salty/2024-01-salty/src/rewards/RewardsConfig.sol",
      "isImp": false,
      "reason": "The provided smart contract code does not implement a 'ballotMinimumDuration' variable or any functionality related to a minimum duration for a ballot as described."
    },
    {
      "file": "repo_check/ico/salty/2024-01-salty/src/rewards/RewardsEmitter.sol",
      "isImp": false,
      "reason": "The smart contract code provided does not include any functionality or variable related to 'ballotMinimumDuration' or managing ballots and their duration. The contract seems to deal with rewards distribution and storage, particularly for a token called SALT, rather than ballot management and timing."
    },
    {
      "file": "repo_check/ico/salty/2024-01-salty/src/rewards/SaltRewards.sol",
      "isImp": false,
      "reason": "The smart contract does not implement 'ballotMinimumDuration' or any functionality related to minimum days a ballot has to exist before action can be taken, as described in the tokenomics. The contract is a SaltRewards contract dealing with distributing SALT rewards and does not contain governance or voting logic."
    },
    {
      "file": "repo_check/ico/salty/2024-01-salty/src/staking/StakingConfig.sol",
      "isImp": false,
      "reason": "The given smart contract does not have any implementation related to 'ballotMinimumDuration' or managing the minimum duration for a ballot. The contract is concerned with staking configurations, particularly unstaking parameters and cooldowns for staking modifications."
    },
    {
      "file": "repo_check/ico/salty/2024-01-salty/src/staking/StakingRewards.sol",
      "isImp": false,
      "reason": "The smart contract does not implement the functionality related to 'ballotMinimumDuration' or any ballot-related functionality. It is focused on staking rewards, managing user shares, and SALT token allocations, rather than governance or voting mechanisms."
    }
  ],
  "\nrequiredProposalPercentStake - the percent of staked SALT that a user has to have to make a proposal. Default: .50%\n   ": [
    {
      "file": "repo_check/ico/salty/2024-01-salty/src/dao/DAO.sol",
      "isImp": false,
      "reason": "The provided smart contract code does not define or mention 'requiredProposalPercentStake' or any functionality related to a required percent of staked SALT to make a proposal."
    },
    {
      "file": "repo_check/ico/salty/2024-01-salty/src/dao/DAOConfig.sol",
      "isImp": true,
      "reason": "The smart contract implements the 'requiredProposalPercentStake' described in the whitepaper. It is defined with a default value as 'requiredProposalPercentStakeTimes1000' set to '500', which, when divided by the multiplier of 1000, represents 0.50%."
    },
    {
      "file": "repo_check/ico/salty/2024-01-salty/src/dao/Parameters.sol",
      "isImp": true,
      "reason": "The smart contract does contain a setting related to 'requiredProposalPercentStake'. It is found as 'requiredProposalPercentStakeTimes1000' within the ParameterTypes enum and is modified in the _executeParameterChange method under the DAOConfig section. Thus, it implements the functionality to change the required percentage stake for making a proposal as described."
    },
    {
      "file": "repo_check/ico/salty/2024-01-salty/src/launch/Airdrop.sol",
      "isImp": false,
      "reason": "The smart contract provided does not include any functionality or parameters related to 'requiredProposalPercentStake' or the conditions for making a proposal based on the percentage of staked SALT. The contract seems to deal strictly with the mechanics of an airdrop, not with proposals or proposal requirements."
    },
    {
      "file": "repo_check/ico/salty/2024-01-salty/src/launch/BootstrapBallot.sol",
      "isImp": false,
      "reason": "The Smart Contract code does not implement requiredProposalPercentStake or any related logic for making a proposal based on a percentage of staked SALT."
    },
    {
      "file": "repo_check/ico/salty/2024-01-salty/src/launch/InitialDistribution.sol",
      "isImp": false,
      "reason": "The smart contract code provided does not contain any reference to 'requiredProposalPercentStake' or any logic related to the percentage of staked SALT required for making a proposal. The contract mainly handles the initial distribution of SALT tokens to various entities such as emissions, DAO reserve vesting wallet, initial development team vesting wallet, airdrop participants, and for liquidity and staking bootstrapping. There is no functionality regarding governance proposals or stake requirements for proposals."
    },
    {
      "file": "repo_check/ico/salty/2024-01-salty/src/rewards/RewardsConfig.sol",
      "isImp": false,
      "reason": "The smart contract provided does not implement a setting for 'requiredProposalPercentStake'. There is no variable or function in the contract that refers to the percent of staked SALT necessary for a user to make a proposal."
    },
    {
      "file": "repo_check/ico/salty/2024-01-salty/src/rewards/RewardsEmitter.sol",
      "isImp": false,
      "reason": "The provided smart contract code does not contain any reference or functionality related to 'requiredProposalPercentStake' which indicates the percent of staked SALT that a user must have to make a proposal. The smart contract is centered around a RewardsEmitter system for distributing SALT token rewards and does not include governance or proposal features."
    },
    {
      "file": "repo_check/ico/salty/2024-01-salty/src/rewards/SaltRewards.sol",
      "isImp": false,
      "reason": "The smart contract code provided does not include any logic related to 'requiredProposalPercentStake' or a mechanism for making proposals based on a percent of staked SALT. The contract mainly handles the distribution of SALT rewards to stakers and liquidity providers."
    },
    {
      "file": "repo_check/ico/salty/2024-01-salty/src/staking/StakingConfig.sol",
      "isImp": false,
      "reason": "The smart contract StakingConfig does not implement 'requiredProposalPercentStake' or define any functionality related to the percentage of staked SALT needed to make a proposal. The contract only manages staking configuration parameters such as 'minUnstakeWeeks', 'maxUnstakeWeeks', 'minUnstakePercent', and 'modificationCooldown'."
    },
    {
      "file": "repo_check/ico/salty/2024-01-salty/src/staking/StakingRewards.sol",
      "isImp": false,
      "reason": "The smart contract provided does not contain any functionality or parameters for a user to make a proposal or a requirement involving a percentage of staked SALT necessary for making a proposal."
    }
  ],
  "\npercentRewardsForReserve - the percentage of SALT from arbitrage (excluding the upkeep reward) that is sent to the DAO's reserve. Default: 10%\n   ": [
    {
      "file": "repo_check/ico/salty/2024-01-salty/src/dao/DAO.sol",
      "isImp": false,
      "reason": "The smart contract does not define a specific 'percentRewardsForReserve' parameter nor does it implement functionality for sending a percentage of SALT from arbitrage to the DAO's reserve. Arbitrage profits are handled by the 'withdrawArbitrageProfits' function which sends profits to the sender (the Upkeep contract), and the 'processRewardsFromPOL' function which distributes SALT rewards with a portion sent to a team wallet and partially burned, but does not define a reserve."
    },
    {
      "file": "repo_check/ico/salty/2024-01-salty/src/dao/DAOConfig.sol",
      "isImp": false,
      "reason": "The smart contract does not implement a 'percentRewardsForReserve' variable nor functionality that corresponds with the percentage of SALT from arbitrage sent to the DAO's reserve as described in the whitepaper. Instead, the contract has a 'arbitrageProfitsPercentPOL' variable that specifies the share of WETH arbitrage profits sent to form SALT/USDS Protocol Owned Liquidity, which is different from a reserve."
    },
    {
      "file": "repo_check/ico/salty/2024-01-salty/src/dao/Parameters.sol",
      "isImp": false,
      "reason": "The smart contract provided does not contain any implementation or parameter that directly corresponds to 'percentRewardsForReserve' or describes the logic for distributing a percentage of SALT from arbitrage to the DAO's reserve. The closest related parameter is 'percentArbitrageProfitsForStablePOL', but it is not equivalent to the described 'percentRewardsForReserve' with a default of 10%."
    },
    {
      "file": "repo_check/ico/salty/2024-01-salty/src/launch/Airdrop.sol",
      "isImp": false,
      "reason": "The provided smart contract code named 'Airdrop' does not implement any logic related to 'percentRewardsForReserve' or the distribution of SALT from arbitrage to the DAO's reserve. The contract focuses on the airdrop mechanism for users who meet specific criteria, not on DAO reserves or arbitrage mechanisms."
    },
    {
      "file": "repo_check/ico/salty/2024-01-salty/src/launch/BootstrapBallot.sol",
      "isImp": false,
      "reason": "The provided smart contract 'BootstrapBallot' does not contain any reference to 'percentRewardsForReserve' or to functionality related to handling percentages of SALT from arbitrage that are sent to a DAO's reserve. The contract mainly focuses on voting to start an exchange and establishing initial geo restrictions, with no implementation details about tokenomics as described."
    },
    {
      "file": "repo_check/ico/salty/2024-01-salty/src/launch/InitialDistribution.sol",
      "isImp": false,
      "reason": "The smart contract provided does not include a mechanism for dynamically allocating a percentage of SALT from arbitrage to the DAO's reserve as described in the whitepaper. The 'InitialDistribution' contract only accounts for a one-time distribution of tokens to predefined parties, including a static amount to the DAO reserve, with no reference to ongoing arbitrage revenue sharing."
    },
    {
      "file": "repo_check/ico/salty/2024-01-salty/src/rewards/RewardsConfig.sol",
      "isImp": false,
      "reason": "The smart contract does not implement 'percentRewardsForReserve' parameter as described. It manages reward distribution percentages related to different types of rewards and weekly emissions, but does not specifically mention sending a percentage of SALT from arbitrage to the DAO's reserve."
    },
    {
      "file": "repo_check/ico/salty/2024-01-salty/src/rewards/RewardsEmitter.sol",
      "isImp": false,
      "reason": "The provided smart contract code does not include any reference to 'percentRewardsForReserve' or any functionality to send a percentage of SALT to a DAO's reserve. The contract relates to storing and distributing SALT rewards through a RewardsEmitter system with emphasis on distributing rewards at a default rate of 1% per day to those holding shares in the specified StakingRewards contract. There is no mention of the DAO reserve or the handling of percentages for reserves from arbitrage, which suggests that this specific tokenomic aspect is not implemented in the given smart contract."
    },
    {
      "file": "repo_check/ico/salty/2024-01-salty/src/rewards/SaltRewards.sol",
      "isImp": false,
      "reason": "The smart contract does not implement a mechanism for sending a percentage of SALT from arbitrage to the DAO's reserve as described in the tokenomics."
    },
    {
      "file": "repo_check/ico/salty/2024-01-salty/src/staking/StakingConfig.sol",
      "isImp": false,
      "reason": "The provided smart contract does not implement the 'percentRewardsForReserve' functionality as described in the whitepaper. There is no variable or function that defines or handles the percentage of SALT from arbitrage that is sent to the DAO's reserve."
    },
    {
      "file": "repo_check/ico/salty/2024-01-salty/src/staking/StakingRewards.sol",
      "isImp": false,
      "reason": "The smart contract code does not mention or implement 'percentRewardsForReserve' or any direct logic related to the allocation of a percentage of SALT from arbitrage to the DAO's reserve. "
    }
  ],
  "\nupkeepRewardPercent - the share of the WETH arbitrage profits sent to the DAO that are sent to the caller of DAO.performUpkeep(). Default: 5%\n   ": [
    {
      "file": "repo_check/ico/salty/2024-01-salty/src/dao/DAO.sol",
      "isImp": false,
      "reason": "There is no mention of upkeepRewardPercent or any direct mechanism for distributing WETH arbitrage profits to the caller of DAO.performUpkeep() in the provided Smart Contract code."
    },
    {
      "file": "repo_check/ico/salty/2024-01-salty/src/dao/DAOConfig.sol",
      "isImp": true,
      "reason": "The smart contract defines a public uint256 variable 'upkeepRewardPercent' with a default value of 5, which corresponds to the description stating that the default share of the WETH arbitrage profits sent to the DAO that are sent to the caller of DAO.performUpkeep() is 5%."
    },
    {
      "file": "repo_check/ico/salty/2024-01-salty/src/dao/Parameters.sol",
      "isImp": false,
      "reason": "The smart contract code provided does not include any default values or specific implementations for the 'upkeepRewardPercent' parameter. It merely includes a method to change this parameter within the DAOConfig, but no default assignment or calculation related to the default value is visible in the given code."
    },
    {
      "file": "repo_check/ico/salty/2024-01-salty/src/launch/Airdrop.sol",
      "isImp": false,
      "reason": "The smart contract does not implement the 'upkeepRewardPercent' feature as described. The contract is an Airdrop contract for the Salty.IO, managing the distribution of SALT tokens to participants and does not mention or handle any WETH arbitrage profits or a DAO with an upkeep reward system."
    },
    {
      "file": "repo_check/ico/salty/2024-01-salty/src/launch/BootstrapBallot.sol",
      "isImp": false,
      "reason": "The provided Smart Contract code does not include any functionality or reference related to the 'upkeepRewardPercent' or the sharing of WETH arbitrage profits. The code appears to be for a BootstrapBallot contract, which handles the voting process for whether to start an exchange, but does not involve tokenomics or profit-sharing mechanisms."
    },
    {
      "file": "repo_check/ico/salty/2024-01-salty/src/launch/InitialDistribution.sol",
      "isImp": false,
      "reason": "The provided smart contract does not define nor implement any functionality related to 'upkeepRewardPercent' or the distribution of WETH arbitrage profits to the DAO or the caller of a 'performUpkeep()' function."
    },
    {
      "file": "repo_check/ico/salty/2024-01-salty/src/rewards/RewardsConfig.sol",
      "isImp": false,
      "reason": "The smart contract RewardsConfig does not implement any functionality related to 'upkeepRewardPercent' or the distribution of WETH arbitrage profits to the DAO or the caller of DAO.performUpkeep(). The smart contract manages the distribution of rewards for staking and liquidity, but there is no mention of WETH arbitrage profits or a parameter named 'upkeepRewardPercent'."
    },
    {
      "file": "repo_check/ico/salty/2024-01-salty/src/rewards/RewardsEmitter.sol",
      "isImp": false,
      "reason": "The contract does not implement a feature for distributing a share of WETH arbitrage profits to the DAO or the caller of DAO.performUpkeep(). The smart contract is related to the distribution of SALT rewards and manages the rate at which rewards are distributed for staking and liquidity, with no mention of WETH arbitrage profits or a default 5% upkeep reward percent."
    },
    {
      "file": "repo_check/ico/salty/2024-01-salty/src/rewards/SaltRewards.sol",
      "isImp": false,
      "reason": "The provided smart contract does not implement the upkeepRewardPercent or any logic related to WETH arbitrage profits being sent to the DAO or to the caller of DAO.performUpkeep(). The contract focuses on distributing SALT rewards to different emitters based on staking and liquidity, and there is no reference to WETH arbitrage profits or their distribution to the DAO's upkeep caller."
    },
    {
      "file": "repo_check/ico/salty/2024-01-salty/src/staking/StakingConfig.sol",
      "isImp": false,
      "reason": "The provided smart contract does not implement the 'upkeepRewardPercent' variable or any logic related to handling WETH arbitrage profits. The contract focuses on staking configurations, with variables and functions for managing unstaking periods and cooldowns but lacks any functions or references to 'performUpkeep()', WETH arbitrage, or distribution of profits."
    },
    {
      "file": "repo_check/ico/salty/2024-01-salty/src/staking/StakingRewards.sol",
      "isImp": false,
      "reason": "The provided smart contract does not implement or mention a 'upkeepRewardPercent' or the division of WETH arbitrage profits to a DAO or caller of a function 'DAO.performUpkeep()'. The smart contract primarily deals with staking rewards for SALT tokens and liquidity shares without reference to WETH or a specific upkeep reward mechanism."
    }
  ],
  "\nballotMaximumDuration - how many days maximum a ballot can before it can be manually canceled by any user. Default: 30 days\n    ": [
    {
      "file": "repo_check/ico/salty/2024-01-salty/src/dao/DAO.sol",
      "isImp": false,
      "reason": "The smart contract does not appear to implement the tokenomics feature described as 'ballotMaximumDuration' which specifies the maximum number of days a ballot can run before it can be manually canceled by any user. This parameter is not found in the provided code."
    },
    {
      "file": "repo_check/ico/salty/2024-01-salty/src/dao/DAOConfig.sol",
      "isImp": false,
      "reason": "The smart contract does not implement the described 'ballotMaximumDuration'. It only has 'ballotMinimumDuration' parameter which represents the minimum days a ballot has to exist before action and is not configurable to a maximum value nor does it allow cancellation by any user."
    },
    {
      "file": "repo_check/ico/salty/2024-01-salty/src/dao/Parameters.sol",
      "isImp": false,
      "reason": "The smart contract does not implement a parameter named 'ballotMaximumDuration' or provide functionality to manually cancel a ballot by any user."
    },
    {
      "file": "repo_check/ico/salty/2024-01-salty/src/launch/Airdrop.sol",
      "isImp": false,
      "reason": "The provided smart contract does not implement a feature related to 'ballotMaximumDuration' as described. There is no mention or mechanism to handle the duration of a ballot in the provided code, nor is there functionality to manually cancel a ballot by any user. The smart contract focuses on the airdrop mechanism, authorization of users, and claiming of staked SALT tokens, without reference to ballot duration management."
    },
    {
      "file": "repo_check/ico/salty/2024-01-salty/src/launch/BootstrapBallot.sol",
      "isImp": false,
      "reason": "The smart contract does not contain any functionality for a ballot to be manually canceled by any user, nor does it specify a 'ballotMaximumDuration'. The contract instead has a completionTimestamp after which the ballot is finalized, but no cancellation feature is present."
    },
    {
      "file": "repo_check/ico/salty/2024-01-salty/src/launch/InitialDistribution.sol",
      "isImp": false,
      "reason": "The Smart Contract provided does not mention or implement any functionality related to 'ballotMaximumDuration' or the ability for a ballot to be manually canceled by any user, let alone within a default timespan of 30 days."
    },
    {
      "file": "repo_check/ico/salty/2024-01-salty/src/rewards/RewardsConfig.sol",
      "isImp": false,
      "reason": "The smart contract provided does not contain any references or variables related to 'ballotMaximumDuration' nor does it have a mechanism for ballots to be canceled by any user."
    },
    {
      "file": "repo_check/ico/salty/2024-01-salty/src/rewards/RewardsEmitter.sol",
      "isImp": false,
      "reason": "The provided smart contract does not implement any feature related to a 'ballotMaximumDuration' or any functionality allowing a ballot to be canceled. The contract is focused on rewards emission for a staking mechanism; it includes functions for adding rewards, performing upkeep, and storing pending rewards. There is no mention of ballots or any associated durations."
    },
    {
      "file": "repo_check/ico/salty/2024-01-salty/src/rewards/SaltRewards.sol",
      "isImp": false,
      "reason": "The smart contract provided does not specify any functionality related to ballotMaximumDuration or the ability for a ballot to be manually canceled by any user. The contract appears to be focused on distributing SALT rewards to various entities, including staking and liquidity providers, and has no mention of a voting or ballot system."
    },
    {
      "file": "repo_check/ico/salty/2024-01-salty/src/staking/StakingConfig.sol",
      "isImp": false,
      "reason": "The given smart contract code does not implement the 'ballotMaximumDuration' feature described in the whitepaper. The contract deals with staking parameters such as 'minUnstakeWeeks', 'maxUnstakeWeeks', 'minUnstakePercent', and 'modificationCooldown' and provides functionality to adjust these parameters, but it does not include any functionality related to balloting or canceling ballots after a maximum duration."
    },
    {
      "file": "repo_check/ico/salty/2024-01-salty/src/staking/StakingRewards.sol",
      "isImp": false,
      "reason": "The smart contract code provided does not contain any reference or implementation related to 'ballotMaximumDuration' or ballot handling functionalities. The functionality described in the whitepaper is not implemented in the code snippet provided."
    }
  ],
  "maximumWhitelistedPools - the maximum number of pools that can be whitelisted at any one time. Default: 50": [
    {
      "file": "repo_check/ico/salty/2024-01-salty/src/dao/DAO.sol",
      "isImp": false,
      "reason": "The provided DAO smart contract does not include a parameter or feature named 'maximumWhitelistedPools', nor does it specify a maximum number of whitelisted pools or a default value of 50 as mentioned in the description."
    },
    {
      "file": "repo_check/ico/salty/2024-01-salty/src/dao/DAOConfig.sol",
      "isImp": false,
      "reason": "The smart contract does not contain any reference or implementation related to the maximum number of pools that can be whitelisted at any time. The only similar parameter is 'maxPendingTokensForWhitelisting', which specifies the maximum number of tokens that can be pending for whitelisting, and its default value is set to 5, not 50."
    },
    {
      "file": "repo_check/ico/salty/2024-01-salty/src/dao/Parameters.sol",
      "isImp": false,
      "reason": "The smart contract provided does not explicitly define a default value for 'maximumWhitelistedPools'. The contract contains a function to change the parameter, but the actual default value (50) is not set or mentioned in the contract code provided."
    },
    {
      "file": "repo_check/ico/salty/2024-01-salty/src/launch/Airdrop.sol",
      "isImp": false,
      "reason": "The smart contract provided is for an Airdrop contract, but the description pertains to a parameter called 'maximumWhitelistedPools', which is not found in the contract nor related to its functionality."
    },
    {
      "file": "repo_check/ico/salty/2024-01-salty/src/launch/BootstrapBallot.sol",
      "isImp": false,
      "reason": "The Smart Contract provided does not implement or mention a 'maximumWhitelistedPools' parameter or functionality. The contract's purpose pertains to a BootstrapBallot for voting on the start-up of an exchange and initial geo restrictions, none of which relate to a limitation on the number of whitelisted pools."
    },
    {
      "file": "repo_check/ico/salty/2024-01-salty/src/launch/InitialDistribution.sol",
      "isImp": false,
      "reason": "The provided smart contract does not include a 'maximumWhitelistedPools' variable or functionality that enforces a maximum limit on the number of whitelisted pools."
    },
    {
      "file": "repo_check/ico/salty/2024-01-salty/src/rewards/RewardsConfig.sol",
      "isImp": false,
      "reason": "The provided smart contract code does not contain any reference to a 'maximumWhitelistedPools' variable or functionality, nor does it provide a default value of 50 or any related mechanism for whitelisting pools."
    },
    {
      "file": "repo_check/ico/salty/2024-01-salty/src/rewards/RewardsEmitter.sol",
      "isImp": false,
      "reason": "The smart contract code provided does not contain any reference to a 'maximumWhitelistedPools' variable or a default value of 50. The contract appears to manage rewards emission for whitelisted pools, but there's no indication of a maximum number of whitelisted pools being enforced."
    },
    {
      "file": "repo_check/ico/salty/2024-01-salty/src/rewards/SaltRewards.sol",
      "isImp": false,
      "reason": "The smart contract provided does not implement or mention a variable for 'maximumWhitelistedPools', nor does it set a default value of 50 for any such parameter."
    },
    {
      "file": "repo_check/ico/salty/2024-01-salty/src/staking/StakingConfig.sol",
      "isImp": false,
      "reason": "The provided smart contract does not implement any functionality or state related to a maximum number of whitelisted pools. The provided contract is a StakingConfig contract that deals with unstaking parameters and cooldowns rather than pool whitelisting."
    },
    {
      "file": "repo_check/ico/salty/2024-01-salty/src/staking/StakingRewards.sol",
      "isImp": false,
      "reason": "The smart contract does not implement a 'maximumWhitelistedPools' limit or have any related functionality. The given description about the tokenomics regarding maximumWhitelistedPools cannot be found within the current contract's code."
    }
  ],
  "rewardsEmitterDailyPercentTimes1000 - the target daily percent of rewards distributed by the stakingRewardsEmitter and liquidityRewardsEmitter. Default: 1%": [
    {
      "file": "repo_check/ico/salty/2024-01-salty/src/dao/DAO.sol",
      "isImp": false,
      "reason": "The provided smart contract code does not contain any reference to 'rewardsEmitterDailyPercentTimes1000' or a mechanism for distributing a daily percentage of rewards through stakingRewardsEmitter and liquidityRewardsEmitter. The contract includes various configurations for rewards, pools, and parameters, but lacks direct evidence of a default 1% daily target for rewards distribution as described."
    },
    {
      "file": "repo_check/ico/salty/2024-01-salty/src/dao/DAOConfig.sol",
      "isImp": false,
      "reason": "The smart contract does not implement 'rewardsEmitterDailyPercentTimes1000' as described in the tokenomics. No such variable or functionality related to 'stakingRewardsEmitter' or 'liquidityRewardsEmitter' or a default daily percent distribution is found in the given contract."
    },
    {
      "file": "repo_check/ico/salty/2024-01-salty/src/dao/Parameters.sol",
      "isImp": true,
      "reason": "The smart contract has an enum ParameterTypes with a value called 'rewardsEmitterDailyPercentTimes1000' which is used within the _executeParameterChange function. This parameter allows the modification of the percentage of rewards distributed daily by linking to a rewardsConfig interface method changeRewardsEmitterDailyPercent, which is assumed to reflect the intended tokenomics as described."
    },
    {
      "file": "repo_check/ico/salty/2024-01-salty/src/launch/Airdrop.sol",
      "isImp": false,
      "reason": "The provided Smart Contract for the Airdrop does not include any references to a 'rewardsEmitterDailyPercentTimes1000', nor does it implement functionality for a stakingRewardsEmitter or liquidityRewardsEmitter as described in the whitepaper. It mainly deals with airdrop authorization, claiming, and staking of SALT tokens, without any daily percent target for rewards distribution."
    },
    {
      "file": "repo_check/ico/salty/2024-01-salty/src/launch/BootstrapBallot.sol",
      "isImp": false,
      "reason": "The smart contract provided does not implement the 'rewardsEmitterDailyPercentTimes1000' parameter as described."
    },
    {
      "file": "repo_check/ico/salty/2024-01-salty/src/launch/InitialDistribution.sol",
      "isImp": false,
      "reason": "The smart contract provided does not implement a 'rewardsEmitterDailyPercentTimes1000' configuration or any similar logic that indicates a target daily percent of rewards distributed. The provided contract handles the initial distribution of tokens to various parties but does not contain any references to daily reward distribution percentages."
    },
    {
      "file": "repo_check/ico/salty/2024-01-salty/src/rewards/RewardsConfig.sol",
      "isImp": true,
      "reason": "The smart contract has a variable 'rewardsEmitterDailyPercentTimes1000' which is correctly initialized to 1000, equating to the default of 1%."
    },
    {
      "file": "repo_check/ico/salty/2024-01-salty/src/rewards/RewardsEmitter.sol",
      "isImp": false,
      "reason": "The smart contract does not explicitly define a 'rewardsEmitterDailyPercentTimes1000' with a default value of 1%. Instead, it uses 'rewardsConfig.rewardsEmitterDailyPercentTimes1000()' to determine the percentage of the rewards to distribute, which means the actual percentage could be different and is not set by default in the contract code."
    },
    {
      "file": "repo_check/ico/salty/2024-01-salty/src/rewards/SaltRewards.sol",
      "isImp": false,
      "reason": "The smart contract code provided does not define or implement 'rewardsEmitterDailyPercentTimes1000' or a mechanism to set a target daily percentage for rewards distribution."
    },
    {
      "file": "repo_check/ico/salty/2024-01-salty/src/staking/StakingConfig.sol",
      "isImp": false,
      "reason": "The provided Smart Contract does not contain any definition or implementation related to 'rewardsEmitterDailyPercentTimes1000' or the management of reward distribution percentages."
    },
    {
      "file": "repo_check/ico/salty/2024-01-salty/src/staking/StakingRewards.sol",
      "isImp": false,
      "reason": "The contract does not define a 'rewardsEmitterDailyPercentTimes1000' or any implementation detail that sets a target daily percent of rewards distributed by specific emitters. The prototype for distributing rewards via the 'addSALTRewards' function does not mention or calculate a daily percentage for distributing rewards."
    }
  ],
  "emissionsWeeklyPercentTimes1000 - the weekly percent of SALT emissions that will be distributed from the Emissions contract. Default: .5%": [
    {
      "file": "repo_check/ico/salty/2024-01-salty/src/dao/DAO.sol",
      "isImp": false,
      "reason": "The smart contract provided does not include any implementation or reference to 'emissionsWeeklyPercentTimes1000' nor does it contain a function or logic for the distribution of SALT emissions on a weekly basis. The contract mainly handles DAO governance actions such as proposing ballots, voting, executing proposals, managing Protocol Owned Liquidity, maintaining country exclusions, and other admin functionalities."
    },
    {
      "file": "repo_check/ico/salty/2024-01-salty/src/dao/DAOConfig.sol",
      "isImp": false,
      "reason": "The smart contract provided does not implement or mention an 'emissionsWeeklyPercentTimes1000' variable or any functionality related to it. The description of emissionsWeeklyPercentTimes1000 from the whitepaper is not represented in the smart contract code provided."
    },
    {
      "file": "repo_check/ico/salty/2024-01-salty/src/dao/Parameters.sol",
      "isImp": true,
      "reason": "The smart contract does implement a function '_executeParameterChange' that has the capability to change the parameter 'emissionsWeeklyPercentTimes1000' through the parameter type of the same name. This matches the description stating the purpose of the parameter being to define the weekly percent of SALT emissions."
    },
    {
      "file": "repo_check/ico/salty/2024-01-salty/src/launch/Airdrop.sol",
      "isImp": false,
      "reason": "The provided smart contract code does not include an implementation for handling emissionsWeeklyPercentTimes1000 or any emissions distribution logic related to a percentage or contract called 'Emissions'. The smart contract is focused on the airdrop mechanism for authorized users to claim staked SALT after certain conditions are met."
    },
    {
      "file": "repo_check/ico/salty/2024-01-salty/src/launch/BootstrapBallot.sol",
      "isImp": false,
      "reason": "The provided smart contract does not include any logic or reference to emissionsWeeklyPercentTimes1000 or a similar parameter for distributing emissions on a weekly basis or at any other frequency. It is focused on the functionality of a BootstrapBallot mechanism for voting to start up the exchange and establish initial geo restrictions, but does not handle token emissions."
    },
    {
      "file": "repo_check/ico/salty/2024-01-salty/src/launch/InitialDistribution.sol",
      "isImp": false,
      "reason": "The smart contract's 'InitialDistribution' does not contain any reference to a weekly percent times 1000 or any such mechanism that denotes a recurring emissions distribution. It only contains a one-time transfer in the 'distributionApproved' function."
    },
    {
      "file": "repo_check/ico/salty/2024-01-salty/src/rewards/RewardsConfig.sol",
      "isImp": true,
      "reason": "The smart contract has a variable named `emissionsWeeklyPercentTimes1000` which is used to determine the weekly percent of SALT emissions distributed from the Emissions contract. It is initialized with the value of 500, which represents the default value of 0.5% when considering the 1000x multiplier in place."
    },
    {
      "file": "repo_check/ico/salty/2024-01-salty/src/rewards/RewardsEmitter.sol",
      "isImp": false,
      "reason": "The smart contract uses a daily percent rate for emissions (noted as rewardsEmitterDailyPercentTimes1000) instead of a weekly percent rate as described in the whitepaper (noted as emissionsWeeklyPercentTimes1000)."
    },
    {
      "file": "repo_check/ico/salty/2024-01-salty/src/rewards/SaltRewards.sol",
      "isImp": false,
      "reason": "The smart contract does not implement the described emissionsWeeklyPercentTimes1000; there is no explicit reference to a .5% weekly emission rate, nor any logic referencing this in the provided contract code."
    },
    {
      "file": "repo_check/ico/salty/2024-01-salty/src/staking/StakingConfig.sol",
      "isImp": false,
      "reason": "The provided smart contract does not implement a feature related to 'emissionsWeeklyPercentTimes1000' or any distribution of SALT emissions. The contract is focused on configuration parameters for unstaking, with methods to modify the minimum and maximum unstake weeks, minimum unstake percent, and modification cooldown. No functionality related to emissions or weekly distributions is present in the smart contract code."
    },
    {
      "file": "repo_check/ico/salty/2024-01-salty/src/staking/StakingRewards.sol",
      "isImp": false,
      "reason": "The smart contract does not mention anything explicitly about 'emissionsWeeklyPercentTimes1000' or handling a weekly percent of SALT emissions to be distributed. No mention of Emissions contract or such a default value is present."
    }
  ],
  "stakingRewardsPercent - the percentage of rewards received by SALT stakers (compared to liquidity providers). Default: 50%": [
    {
      "file": "repo_check/ico/salty/2024-01-salty/src/dao/DAO.sol",
      "isImp": false,
      "reason": "The provided smart contract does not seem to implement a mechanism or parameter directly reflecting a 'stakingRewardsPercent' or percentage of rewards received by SALT stakers. The smart contract primarily deals with governance functions such as proposing ballots, voting, and executing approved proposals. While it does interact with various aspects of the system including rewards, pools, and staking, there is no explicit mention or computation related to the specific distribution of rewards between SALT stakers and liquidity providers."
    },
    {
      "file": "repo_check/ico/salty/2024-01-salty/src/dao/DAOConfig.sol",
      "isImp": false,
      "reason": "The provided smart contract does not contain any parameter or function related to 'stakingRewardsPercent' or the distribution of rewards between SALT stakers and liquidity providers."
    },
    {
      "file": "repo_check/ico/salty/2024-01-salty/src/dao/Parameters.sol",
      "isImp": false,
      "reason": "The smart contract code does not explicitly set a default value for stakingRewardsPercent; thus, we cannot verify if it matches the described default value of 50% from the whitepaper."
    },
    {
      "file": "repo_check/ico/salty/2024-01-salty/src/launch/Airdrop.sol",
      "isImp": false,
      "reason": "The provided Smart Contract code does not include any reference to 'stakingRewardsPercent' or a mechanism for distributing rewards between SALT stakers and liquidity providers at any specified ratio or percentage. It focuses on the airdrop claiming logic for authorized users and the transfer of staked SALT to them, without distinction between different types of recipients such as stakers or liquidity providers."
    },
    {
      "file": "repo_check/ico/salty/2024-01-salty/src/launch/BootstrapBallot.sol",
      "isImp": false,
      "reason": "The provided smart contract does not contain any implementation related to 'stakingRewardsPercent' or mechanisms for distributing rewards to SALT stakers. The contract focuses on a voting mechanism for an airdrop and the startup of an exchange, as well as initial geo restrictions, but does not address tokenomics such as staking rewards percentages."
    },
    {
      "file": "repo_check/ico/salty/2024-01-salty/src/launch/InitialDistribution.sol",
      "isImp": false,
      "reason": "The smart contract does not provide a specific stakingRewardsPercent value or mechanism to distribute rewards based on a percentage between SALT stakers and liquidity providers. The contract simply transfers a lump sum amount to the saltRewards contract without specifying any ratio or percentage for further distribution."
    },
    {
      "file": "repo_check/ico/salty/2024-01-salty/src/rewards/RewardsConfig.sol",
      "isImp": true,
      "reason": "The smart contract defines 'stakingRewardsPercent' with a default value of 50, matching the description of the percentage of rewards received by SALT stakers (compared to liquidity providers) being default at 50%."
    },
    {
      "file": "repo_check/ico/salty/2024-01-salty/src/rewards/RewardsEmitter.sol",
      "isImp": false,
      "reason": "The provided smart contract does not define a specific 'stakingRewardsPercent' nor does it contain logic to distribute rewards based on a fixed percentage for SALT stakers compared to liquidity providers. The contract uses a generic mechanism to distribute pending rewards to whitelisted pools without differentiating between SALT stakers and liquidity providers."
    },
    {
      "file": "repo_check/ico/salty/2024-01-salty/src/rewards/SaltRewards.sol",
      "isImp": false,
      "reason": "The smart contract relies on an external rewardsConfig for setting the stakingRewardsPercent. It is not specified in the contract itself, and we cannot verify that the percentage is set to the 50% default without additional information on the rewardsConfig's configuration."
    },
    {
      "file": "repo_check/ico/salty/2024-01-salty/src/staking/StakingConfig.sol",
      "isImp": false,
      "reason": "The smart contract provided does not implement a 'stakingRewardsPercent' variable or any related functionality that defines the distribution percentage of rewards between SALT stakers and liquidity providers. The contract mainly focuses on the configuration of unstaking parameters and does not address reward allocation parameters."
    },
    {
      "file": "repo_check/ico/salty/2024-01-salty/src/staking/StakingRewards.sol",
      "isImp": false,
      "reason": "The provided smart contract code does not contain any parameter or method that references a stakingRewardsPercent or a mechanism to differentiate the rewards distribution between SALT stakers and liquidity providers. It only manages individual shares and rewards without specifying any distribution percentages between different groups of stakeholders."
    }
  ],
  "minUnstakeWeeks - the minimum number of weeks for an unstake request at which point minUnstakePercent of the original staked SALT is reclaimable. Default: 2 weeks": [
    {
      "file": "repo_check/ico/salty/2024-01-salty/src/dao/DAO.sol",
      "isImp": false,
      "reason": "The provided smart contract code does not include any logic or functions related to 'minUnstakeWeeks' or handling unstaking requests where a minimum percentage of the original staked SALT is reclaimable after a certain number of weeks."
    },
    {
      "file": "repo_check/ico/salty/2024-01-salty/src/dao/DAOConfig.sol",
      "isImp": false,
      "reason": "The smart contract does not contain any parameter or function related to 'minUnstakeWeeks' or handling unstake requests and the reclaimable percent of staked SALT. The provided contract mainly deals with configuration and parameters related to DAO governance and not with staking or unstaking mechanisms."
    },
    {
      "file": "repo_check/ico/salty/2024-01-salty/src/dao/Parameters.sol",
      "isImp": false,
      "reason": "The smart contract provided does not define any default values, including for the 'minUnstakeWeeks' parameter. The parameter is only modifiable through '_executeParameterChange' function, which adjusts the configuration but does not set a default."
    },
    {
      "file": "repo_check/ico/salty/2024-01-salty/src/launch/Airdrop.sol",
      "isImp": false,
      "reason": "The smart contract provided does not reference 'minUnstakeWeeks' or implement any functionality regarding the minimum unstaking period or percentage reclaimable after unstaking. The description provided appears to relate to the unstaking process, but this is not reflected in the smart contract code regarding airdrops and claiming staked SALT tokens."
    },
    {
      "file": "repo_check/ico/salty/2024-01-salty/src/launch/BootstrapBallot.sol",
      "isImp": false,
      "reason": "The smart contract 'BootstrapBallot' pertains to voting on starting the exchange and distributing the SALT token, with no reference to unstaking periods or reclaimable percentages as described in the whitepaper."
    },
    {
      "file": "repo_check/ico/salty/2024-01-salty/src/launch/InitialDistribution.sol",
      "isImp": false,
      "reason": "The provided smart contract code does not include any logic related to minUnstakeWeeks or the unstaking mechanism mentioned in the description."
    },
    {
      "file": "repo_check/ico/salty/2024-01-salty/src/rewards/RewardsConfig.sol",
      "isImp": false,
      "reason": "The RewardsConfig smart contract provided does not contain any variable, function, or logic relating to 'minUnstakeWeeks' or handling the minimum number of weeks required for an unstake request, as mentioned in the whitepaper description. The contract focuses on managing rewards distribution percentages, not staking/unstaking mechanics."
    },
    {
      "file": "repo_check/ico/salty/2024-01-salty/src/rewards/RewardsEmitter.sol",
      "isImp": false,
      "reason": "The smart contract code does not include any mechanisms or parameters related to minUnstakeWeeks or minimum unstaking periods."
    },
    {
      "file": "repo_check/ico/salty/2024-01-salty/src/rewards/SaltRewards.sol",
      "isImp": false,
      "reason": "The provided Smart Contract code does not include a property or logic related to 'minUnstakeWeeks' nor does it mention anything about a minimum unstake time period or percentage of the original staked SALT that is reclaimable. The contract mainly focuses on the distribution of rewards to staking and liquidity pools without any direct reference or implementation of unstaking mechanisms or their constraints."
    },
    {
      "file": "repo_check/ico/salty/2024-01-salty/src/staking/StakingConfig.sol",
      "isImp": true,
      "reason": "The smart contract includes a public variable 'minUnstakeWeeks' with a default value of 2 weeks, which matches the description provided."
    },
    {
      "file": "repo_check/ico/salty/2024-01-salty/src/staking/StakingRewards.sol",
      "isImp": false,
      "reason": "The smart contract code provided does not implement a 'minUnstakeWeeks' parameter or functionality for setting a minimum number of weeks for unstake requests as described in the whitepaper."
    }
  ],
  "maxUnstakeWeeks - the maximum number of weeks for an unstake request at which point 100% of the original staked SALT is reclaimable. Default: 52 weeks": [
    {
      "file": "repo_check/ico/salty/2024-01-salty/src/dao/DAO.sol",
      "isImp": false,
      "reason": "The smart contract provided does not include any definition or implementation of a 'maxUnstakeWeeks' parameter or functionality related to unstake requests or their duration."
    },
    {
      "file": "repo_check/ico/salty/2024-01-salty/src/dao/DAOConfig.sol",
      "isImp": false,
      "reason": "The provided smart contract code does not contain any implementation or references to 'maxUnstakeWeeks' or any functionality related to unstaking periods or reclaiming staked SALT."
    },
    {
      "file": "repo_check/ico/salty/2024-01-salty/src/dao/Parameters.sol",
      "isImp": true,
      "reason": "The smart contract's ParameterTypes enum contains the maxUnstakeWeeks parameter and the _executeParameterChange function includes a case to increase the maxUnstakeWeeks, which corresponds to the whitepaper description about the number of weeks for unstaking. There is also a default value indicated in the whitepaper, but without additional code or the implementation of stakingConfig.changeMaxUnstakeWeeks, it's not possible to verify the default value. However, the parameter's existence and its manipulation mechanism within the smart contract match the whitepaper's description."
    },
    {
      "file": "repo_check/ico/salty/2024-01-salty/src/launch/Airdrop.sol",
      "isImp": false,
      "reason": "The provided smart contract code is for an Airdrop contract, which includes functionality for authorizing users to claim airdrops, allowing claiming after a voting process, and handling the claim process. The code does not contain any references to unstaking or 'maxUnstakeWeeks', indicating that the concept of unstaking or a mechanism for it, including a default time limit, is not implemented within this contract."
    },
    {
      "file": "repo_check/ico/salty/2024-01-salty/src/launch/BootstrapBallot.sol",
      "isImp": false,
      "reason": "The provided smart contract code does not contain any functionality or reference related to the 'maxUnstakeWeeks' parameter or handling of staking/unstaking logic. The contract revolves around a BootstrapBallot for airdrop participants voting on whether to start an exchange and setting initial geographic restrictions. No staking-related code or parameter named 'maxUnstakeWeeks' is present."
    },
    {
      "file": "repo_check/ico/salty/2024-01-salty/src/launch/InitialDistribution.sol",
      "isImp": false,
      "reason": "The provided smart contract code does not include any implementation or mention of 'maxUnstakeWeeks' or any logic related to unstaking periods or the functionality to reclaim staked tokens after a certain number of weeks."
    },
    {
      "file": "repo_check/ico/salty/2024-01-salty/src/rewards/RewardsConfig.sol",
      "isImp": false,
      "reason": "The provided smart contract does not contain any references to 'maxUnstakeWeeks' or functionality related to unstaking periods or reclaiming staked SALT based on time. The contract instead focuses on the configuration of token reward percentages and these adjustments are managed by the owner of the contract."
    },
    {
      "file": "repo_check/ico/salty/2024-01-salty/src/rewards/RewardsEmitter.sol",
      "isImp": false,
      "reason": "The provided Smart Contract does not include any functionality relating to 'maxUnstakeWeeks' or handling unstake requests with a reclaimable percentage based on number of weeks. The contract appears to manage the distribution of SALT rewards but does not define or manage unstaking periods or conditions."
    },
    {
      "file": "repo_check/ico/salty/2024-01-salty/src/rewards/SaltRewards.sol",
      "isImp": false,
      "reason": "The provided smart contract code does not implement or mention a 'maxUnstakeWeeks' feature or any functionality related to unstaking time frames or the gradual reclaim of staked tokens over time. The contract appears to handle reward distribution but does not address unstaking terms."
    },
    {
      "file": "repo_check/ico/salty/2024-01-salty/src/staking/StakingConfig.sol",
      "isImp": true,
      "reason": "The smart contract defines a variable called 'maxUnstakeWeeks' with a default value of 52, which matches the description provided regarding the 'maxUnstakeWeeks' for an unstake request at which point 100% of the original staked SALT is reclaimable."
    },
    {
      "file": "repo_check/ico/salty/2024-01-salty/src/staking/StakingRewards.sol",
      "isImp": "",
      "reason": ""
    }
  ],
  "minUnstakePercent - the percentage of the original staked SALT that is reclaimable when unstaking the minimum number of weeks. Default: 20%": [
    {
      "file": "repo_check/ico/salty/2024-01-salty/src/dao/DAO.sol",
      "isImp": false,
      "reason": "The smart contract code does not implement 'minUnstakePercent' or any functionality related to the unstaking of SALT and claiming a percentage back based on the minimum number of weeks staked."
    },
    {
      "file": "repo_check/ico/salty/2024-01-salty/src/dao/DAOConfig.sol",
      "isImp": false,
      "reason": "The provided smart contract does not contain any reference or functionality related to 'minUnstakePercent' or any unstaking mechanisms with percentages that can be claimed when unstaking SALT."
    },
    {
      "file": "repo_check/ico/salty/2024-01-salty/src/dao/Parameters.sol",
      "isImp": false,
      "reason": "The smart contract does not contain a specific implementation for a default percentage value for 'minUnstakePercent'. It only provides a mechanism to change this parameter."
    },
    {
      "file": "repo_check/ico/salty/2024-01-salty/src/launch/Airdrop.sol",
      "isImp": false,
      "reason": "The smart contract provided does not implement any functionality related to 'minUnstakePercent' or manage the unstaking process with a percentage reclaimable. The described tokenomics regarding unstaking percentages are not present in the Airdrop contract code provided."
    },
    {
      "file": "repo_check/ico/salty/2024-01-salty/src/launch/BootstrapBallot.sol",
      "isImp": false,
      "reason": "The smart contract provided does not implement the described 'minUnstakePercent' tokenomic feature which relates to the unstaking of SALT. The contract focuses on a voting mechanism for starting an exchange and distributing SALT without any mention of unstaking or related parameters."
    },
    {
      "file": "repo_check/ico/salty/2024-01-salty/src/launch/InitialDistribution.sol",
      "isImp": false,
      "reason": "The provided smart contract code does not reference or implement any functionality related to unstaking or a minimum unstake percentage. The 'minUnstakePercent' parameter mentioned in the description is not present or handled in the smart contract."
    },
    {
      "file": "repo_check/ico/salty/2024-01-salty/src/rewards/RewardsConfig.sol",
      "isImp": false,
      "reason": "The provided smart contract does not implement any functionality related to a 'minUnstakePercent' for unstaking SALT tokens. The contract mainly deals with reward emission rates and has functions to adjust these rates, but there is no mention of unstaking mechanisms or a minimum unstake percentage."
    },
    {
      "file": "repo_check/ico/salty/2024-01-salty/src/rewards/RewardsEmitter.sol",
      "isImp": false,
      "reason": "The provided smart contract code does not include any functionality or definition related to 'minUnstakePercent' or the unstaking process. It focuses on reward emission and distribution but does not handle the unstaking terms or percentages."
    },
    {
      "file": "repo_check/ico/salty/2024-01-salty/src/rewards/SaltRewards.sol",
      "isImp": false,
      "reason": "The smart contract code does not reference or implement any functionality or parameters pertaining to 'minUnstakePercent' or a reclaimable percentage when unstaking SALT tokens."
    },
    {
      "file": "repo_check/ico/salty/2024-01-salty/src/staking/StakingConfig.sol",
      "isImp": true,
      "reason": "The smart contract code implements the description provided accurately. The value of the variable 'minUnstakePercent' is set to the default of 20%, which is the percentage of the original staked SALT reclaimable when unstaking the minimum number of weeks."
    },
    {
      "file": "repo_check/ico/salty/2024-01-salty/src/staking/StakingRewards.sol",
      "isImp": false,
      "reason": "The provided smart contract does not implement or mention 'minUnstakePercent' or any logic pertaining to a minimum unstaking percentage based on time or at all."
    }
  ],
  "modificationCooldown - the minimum time between staking and unstaking or between depositing and withdrawing liquidity (to avoid rewards sniping). Default: 1 hour": [
    {
      "file": "repo_check/ico/salty/2024-01-salty/src/dao/DAO.sol",
      "isImp": false,
      "reason": "The provided smart contract does not implement the 'modificationCooldown' feature; this parameter or its equivalent functionality could not be located within the source code."
    },
    {
      "file": "repo_check/ico/salty/2024-01-salty/src/dao/DAOConfig.sol",
      "isImp": false,
      "reason": "The smart contract provided does not have any functionality or parameter related to 'modificationCooldown' that controls the minimum time between staking and unstaking or between depositing and withdrawing liquidity. The concern highlighted in the description regarding rewards sniping is not addressed by any visible mechanism in the given smart contract code."
    },
    {
      "file": "repo_check/ico/salty/2024-01-salty/src/dao/Parameters.sol",
      "isImp": false,
      "reason": "The smart contract provided does not define or implement a specific *modificationCooldown* value such as the default 1 hour as mentioned in the description. It provides a mechanism to change a parameter named *modificationCooldown* but does not set a default value or enforce a time constraint directly in the code. The function `_executeParameterChange` receives a *ParameterTypes* enum and a boolean to increase or decrease the value, and it interacts with external config contracts. There is no hardcoded value or direct handling of a modification cooldown period within the smart contract."
    },
    {
      "file": "repo_check/ico/salty/2024-01-salty/src/launch/Airdrop.sol",
      "isImp": false,
      "reason": "The provided smart contract does not implement any functionality related to a 'modificationCooldown' for minimum time between staking and unstaking or between depositing and withdrawing liquidity. The contract is an 'Airdrop' contract focusing on the distribution of SALT tokens to authorized users who have participated in certain activities. It includes only features related to authorizing wallets, allowing claiming, stakeSALT, etc. There is no mention of a cooldown period in any of the contract's functions or state variables."
    },
    {
      "file": "repo_check/ico/salty/2024-01-salty/src/launch/BootstrapBallot.sol",
      "isImp": false,
      "reason": "The provided Smart Contract does not include any variables or functions related to modificationCooldown, staking, unstaking, depositing, or withdrawing liquidity. Its primary functionality is facilitating a vote through a ballot system to determine whether to start an exchange and distribute tokens to ecosystem contracts. There are no tokenomics mechanisms like modificationCooldown implemented in the contract."
    },
    {
      "file": "repo_check/ico/salty/2024-01-salty/src/launch/InitialDistribution.sol",
      "isImp": false,
      "reason": "The provided smart contract code does not include any implementation related to a 'modificationCooldown' or any timing logic that would enforce a minimum time between staking/unstaking or depositing/withdrawing liquidity."
    },
    {
      "file": "repo_check/ico/salty/2024-01-salty/src/rewards/RewardsConfig.sol",
      "isImp": false,
      "reason": "The provided smart contract code does not implement any mechanism for a modification cooldown. Furthermore, it does not have the related functions or state variables required to enforce a minimum time between staking/unstaking or depositing/withdrawing liquidity. Thus, it does not match the tokenomics description from the whitepaper which specifies a default modification cooldown of 1 hour."
    },
    {
      "file": "repo_check/ico/salty/2024-01-salty/src/rewards/RewardsEmitter.sol",
      "isImp": true,
      "reason": "The smart contract does not implement the 'modificationCooldown' as described. It focuses on distributing SALT rewards through a 'RewardsEmitter' mechanism and interacts with various configuration interfaces, but does not mention or handle a cooldown period for staking and unstaking or for depositing and withdrawing liquidity."
    },
    {
      "file": "repo_check/ico/salty/2024-01-salty/src/rewards/SaltRewards.sol",
      "isImp": false,
      "reason": "The smart contract does not implement a modification cooldown feature, which is designed to prevent rewards sniping by imposing a minimum time between staking and unstaking or depositing and withdrawing liquidity. The provided code does not contain any function or modifier that enforces or checks for cooldown periods based on the transaction timestamps."
    },
    {
      "file": "repo_check/ico/salty/2024-01-salty/src/staking/StakingConfig.sol",
      "isImp": true,
      "reason": "The smart contract implements a `modificationCooldown` variable as described, which is set to 1 hour by default. This indicates the required cooldown period between changing stakes, consistent with the prevention of rewards sniping as mentioned in the description."
    },
    {
      "file": "repo_check/ico/salty/2024-01-salty/src/staking/StakingRewards.sol",
      "isImp": true,
      "reason": "The smart contract does implement a modification cooldown. The function '_increaseUserShare' and '_decreaseUserShare' check if the caller is subjected to a cooldown period by verifying if 'block.timestamp' is greater than or equal to 'user.cooldownExpiration'. For non-DAO users, if the cooldown has expired, they update 'user.cooldownExpiration' to the current timestamp plus the cooldown duration obtained by calling 'stakingConfig.modificationCooldown()'. The comment in the smart contract indicates that the default cooldown is one hour."
    }
  ],
  "In order to incentivize upkeep being done, users calling performUpkeep receive 5% of the arbitrage profits that have been generated since the last call to performUpkeep (rate adjustable by the DAO).  This incentivizes upkeep to be dependent on the activity of the exchange itself.": [
    {
      "file": "repo_check/ico/salty/2024-01-salty/src/dao/DAO.sol",
      "isImp": false,
      "reason": "The smart contract does not implement the described functionality for awarding 5% of the arbitrage profits to users calling performUpkeep. There is no mention of performUpkeep nor any mechanism in the provided code that distributes a percentage of arbitrage profits to the caller."
    },
    {
      "file": "repo_check/ico/salty/2024-01-salty/src/dao/DAOConfig.sol",
      "isImp": false,
      "reason": "The smart contract provided does not include any implementation of a 'performUpkeep' function, nor does it specify that users calling such a function would receive 5% of the arbitrage profits. Additionally, there is no mechanism for adjusting the percentage of arbitrage profits distributed to users performing upkeep."
    },
    {
      "file": "repo_check/ico/salty/2024-01-salty/src/dao/Parameters.sol",
      "isImp": false,
      "reason": "The smart contract provided does not contain any functionality related to distributing a percentage of arbitrage profits to users performing upkeep. It defines parameters for configurations such as DAO, staking, rewards, stable setups, and more, but does not implement the described tokenomics regarding the distribution of arbitrage profits."
    },
    {
      "file": "repo_check/ico/salty/2024-01-salty/src/launch/Airdrop.sol",
      "isImp": false,
      "reason": "The provided smart contract is an 'Airdrop' contract responsible for handling the distribution of the SALT token to users who retweeted and voted as part of the protocol's initial promotion. It does not contain any functionality related to performing upkeep or distributing arbitrage profits, as described in the given tokenomics description. There is no mention of 'performUpkeep' function or any logic to distribute arbitrage profits, and the contract does not seem adjustable by a DAO for such purposes. Therefore, the smart contract does not implement the described tokenomics related to arbitrage profits and upkeep incentives."
    },
    {
      "file": "repo_check/ico/salty/2024-01-salty/src/launch/BootstrapBallot.sol",
      "isImp": false,
      "reason": "The provided smart contract does not contain any function related to incentivizing users or distributing arbitrage profits. The contract is specifically a voting system to decide on starting the exchange and includes functions for voting and finalizing the vote but does not implement tokenomics related to performUpkeep or profit distribution."
    },
    {
      "file": "repo_check/ico/salty/2024-01-salty/src/launch/InitialDistribution.sol",
      "isImp": false,
      "reason": "The provided smart contract code does not include any logic regarding 'performUpkeep' nor does it mention a method for distributing a percentage of arbitrage profits to users. The only function visible in the contract is 'distributionApproved', which handles the initial distribution of the SALT tokens to various parties, including emissions, DAO reserve, development team, airdrop participants, liquidity and staking bootstrapping, but there's no functionality related to 'performUpkeep' or profit sharing."
    },
    {
      "file": "repo_check/ico/salty/2024-01-salty/src/rewards/RewardsConfig.sol",
      "isImp": false,
      "reason": "The provided smart contract code does not implement any functionality related to the distribution of arbitrage profits or a performUpkeep function. There is no mention of arbitrage profits or performUpkept being rewarded to users within the contract's code. The functions present in the contract are only for modifying the parameters of reward distribution percentages and emitting related events."
    },
    {
      "file": "repo_check/ico/salty/2024-01-salty/src/rewards/RewardsEmitter.sol",
      "isImp": false,
      "reason": "The smart contract code provided does not implement a mechanism to distribute 5% of the arbitrage profits to users who call the performUpkeep function. The function performUpkeep in the contract does not mention or calculate any arbitrage profits, nor does it have any logic to distribute a percentage of such profits to the callers. The only operation related to the performUpkeep function is the transfer of SALT rewards to specified StakingRewards pools, based on the time since the last upkeep. Therefore, the contract does not match the description provided regarding the distribution of arbitrage profits to users performing upkeep."
    },
    {
      "file": "repo_check/ico/salty/2024-01-salty/src/rewards/SaltRewards.sol",
      "isImp": false,
      "reason": "The Smart Contract does not implement the feature described in the whitepaper. The 'performUpkeep' function does not contain any logic to reward users calling it with a percentage of the arbitrage profits. It only distributes SALT rewards between stakingRewardsEmitter and liquidityRewardsEmitter based on prior profits but does not allocate a share to the caller of the function."
    },
    {
      "file": "repo_check/ico/salty/2024-01-salty/src/staking/StakingConfig.sol",
      "isImp": false,
      "reason": "The provided smart contract 'StakingConfig' does not contain any functionality related to performUpkeep or the distribution of arbitrage profits. The contract focuses on staking configuration parameters such as minUnstakeWeeks, maxUnstakeWeeks, minUnstakePercent, and modificationCooldown, with functions to adjust these values. It is owned and controlled by the DAO, and parameters are modifiable only by the DAO. The description refers to a different mechanism related to arbitrage profits and performUpkeep, which is not implemented in the provided smart contract."
    },
    {
      "file": "repo_check/ico/salty/2024-01-salty/src/staking/StakingRewards.sol",
      "isImp": false,
      "reason": "The smart contract provided does not implement a function related to performUpkeep, nor does it mention any logic for distributing arbitrage profits, including the 5% incentive to users calling performUpkeep. The contract mainly deals with SALT staking rewards and share management without any reference to arbitrage profit sharing or a performUpkeep function."
    }
  ],
  "A default 9.5% of all arbitrage profits (which are generated in WETH) are swapped to SALT and burned.": [
    {
      "file": "repo_check/ico/salty/2024-01-salty/src/dao/DAO.sol",
      "isImp": false,
      "reason": "The examined smart contract does not implement the feature as described in the whitepaper. The smart contract code contains a function for withdrawing arbitrage profits (withdrawArbitrageProfits), but it doesn't indicate any automatic swapping of a percentage of WETH to SALT, nor a burn of SALT tokens. Additionally, the percentage of 9.5% is not mentioned anywhere in the contract. The contract only outlines the withdrawal of WETH arbitrage profits to the Upkeep contract without any further processing such as swapping and burning."
    },
    {
      "file": "repo_check/ico/salty/2024-01-salty/src/dao/DAOConfig.sol",
      "isImp": false,
      "reason": "The contract specifies that 20% of WETH arbitrage profits are sent to the DAO to form SALT/USDS Protocol Owned Liquidity (POL), not 9.5%. Additionally, there is no implementation of the described burning of SALT in the contract."
    },
    {
      "file": "repo_check/ico/salty/2024-01-salty/src/dao/Parameters.sol",
      "isImp": true,
      "reason": "The smart contract contains a function '_executeParameterChange' which has a case for 'ParameterTypes.percentPolRewardsBurned'. This suggests that there is a mechanism for setting the percentage of rewards (potentially from arbitrage profits) that are burned, which aligns with the description stating that a default 9.5% of all arbitrage profits in WETH are swapped to SALT and burned."
    },
    {
      "file": "repo_check/ico/salty/2024-01-salty/src/launch/Airdrop.sol",
      "isImp": false,
      "reason": "The provided smart contract does not contain any logic related to arbitrage profits being swapped to SALT and burned. The smart contract focuses on an airdrop mechanism involving staked SALT tokens, without any mention of arbitrage profits or the burning of tokens."
    },
    {
      "file": "repo_check/ico/salty/2024-01-salty/src/launch/BootstrapBallot.sol",
      "isImp": false,
      "reason": "The provided Smart Contract does not implement any functionality related to arbitrage profits, their swap to SALT, or burning a percentage of the profits. The contract is for a Bootstrap Ballot that handles voting to start an exchange and distribution of airdrops, but does not handle tokenomics or profit distribution."
    },
    {
      "file": "repo_check/ico/salty/2024-01-salty/src/launch/InitialDistribution.sol",
      "isImp": false,
      "reason": "The provided smart contract does not include any implementation or reference to arbitrage profits, their conversion to SALT, or the burning of tokens. It solely handles the initial distribution of SALT tokens to various parties such as emissions, DAO vesting, team vesting, airdrop participants, and rewards, after the approval of a BootstrapBallot. The contract does not contain any functions or logic related to tokenomics involving arbitrage profits."
    },
    {
      "file": "repo_check/ico/salty/2024-01-salty/src/rewards/RewardsConfig.sol",
      "isImp": false,
      "reason": "The smart contract's code does not implement any functionality to handle the swapping and burning of a percentage of arbitrage profits, as described in the whitepaper."
    },
    {
      "file": "repo_check/ico/salty/2024-01-salty/src/rewards/RewardsEmitter.sol",
      "isImp": false,
      "reason": "The provided smart contract does not include any functionality for swapping arbitrage profits in WETH to SALT and burning a default of 9.5%. The contract focuses on storing and distributing SALT rewards for staking and liquidity provision, with no mention of arbitrage profits handling or burning tokens."
    },
    {
      "file": "repo_check/ico/salty/2024-01-salty/src/rewards/SaltRewards.sol",
      "isImp": false,
      "reason": "The provided smart contract code does not contain any logic for swapping a percentage of arbitrage profits (generated in WETH) to SALT and then burning them. The contract focuses on reward distribution to various emitters but lacks any functionality related to explicitly swapping and burning tokens as part of its operations."
    },
    {
      "file": "repo_check/ico/salty/2024-01-salty/src/staking/StakingConfig.sol",
      "isImp": false,
      "reason": "The smart contract provided does not include any functionality related to swapping a percentage of arbitrage profits to SALT and burning them as described in the whitepaper. The contract seems to handle configuration parameters for staking, including minimum and maximum unstake weeks, minimum unstake percentage, and modification cooldown, but there is no code related to arbitrage profit handling or token burning."
    },
    {
      "file": "repo_check/ico/salty/2024-01-salty/src/staking/StakingRewards.sol",
      "isImp": false,
      "reason": "There is no implementation in the provided smart contract that describes the swapping of 9.5% of arbitrage profits (generated in WETH) to SALT and then burning them. The contract focuses on staking, rewards, and user share management, but does not include any functionality related to handling arbitrage profits or burning tokens."
    }
  ],
  "Bootstrapping Rewards (200k SALT per pool*)  - established when a pool is whitelisted.": [
    {
      "file": "repo_check/ico/salty/2024-01-salty/src/dao/DAO.sol",
      "isImp": false,
      "reason": "The smart contract provided does not explicitly mention 'Bootstrapping Rewards' or the specific amount of '200k SALT per pool' as described in the tokenomics of the whitepaper. While the contract discusses formation of Protocol Owned Liquidity (POL) and mentions 'bootstrappingRewards', it does not define this value in the visible code sections, nor does it clarify the amount being 200k per pool."
    },
    {
      "file": "repo_check/ico/salty/2024-01-salty/src/dao/DAOConfig.sol",
      "isImp": false,
      "reason": "The smart contract specifies that the bootstrapping rewards are 200,000 ether (representing 200k SALT), which is consistent with the description, but the smart contract conditions the distribution of these rewards on the whitelisting of new tokens rather than on the establishment of pools. Therefore, the smart contract does not directly implement the distribution of rewards upon pool whitelisting as described."
    },
    {
      "file": "repo_check/ico/salty/2024-01-salty/src/dao/Parameters.sol",
      "isImp": false,
      "reason": "The provided smart contract code snippet does not contain any specific tokenomics implementation regarding the distribution of 'Bootstrapping Rewards.' There is a function '_executeParameterChange' which references a variety of parameter types including 'bootstrappingRewards.' However, there is no indication of a specific reward amount such as '200k SALT per pool' or the process for establishing this reward when a pool is whitelisted. The code implies configuration changes for parameters but lacks the logic for executing rewards distribution according to the description."
    },
    {
      "file": "repo_check/ico/salty/2024-01-salty/src/launch/Airdrop.sol",
      "isImp": false,
      "reason": "The provided smart contract does not implement 'Bootstrapping Rewards' with a specific amount of SALT tokens per pool as described. It implements an airdrop mechanism for users who retweet the launch announcement and vote, and those authorized can claim a proportionate amount of staked SALT after the BootingstapBallot has concluded. The contract's 'saltAmountForEachUser' is dynamically calculated based on the balance of SALT tokens in the contract and the number of authorized users, and there is no reference to whitelisting pools or distributing a fixed amount of 200k SALT per pool."
    },
    {
      "file": "repo_check/ico/salty/2024-01-salty/src/launch/BootstrapBallot.sol",
      "isImp": false,
      "reason": "The provided smart contract code for 'BootstrapBallot' does not mention or implement anything regarding 'Bootstrapping Rewards' or the distribution of '200k SALT per pool' when a pool is whitelisted."
    },
    {
      "file": "repo_check/ico/salty/2024-01-salty/src/launch/InitialDistribution.sol",
      "isImp": false,
      "reason": "The smart contract does not implement the Description as provided. The contract script shows that liquidity and staking bootstrapping are allocated 8 million SALT combined, with no details regarding a specific amount per whitelisted pool such as the 200k SALT per pool mentioned in the Description."
    },
    {
      "file": "repo_check/ico/salty/2024-01-salty/src/rewards/RewardsConfig.sol",
      "isImp": false,
      "reason": "The provided smart contract does not mention or implement any specific Bootstrapping Rewards or a method to establish rewards when a pool is whitelisted."
    },
    {
      "file": "repo_check/ico/salty/2024-01-salty/src/rewards/RewardsEmitter.sol",
      "isImp": false,
      "reason": "The provided smart contract code does not implement a specific feature for bootstrapping rewards with a fixed amount (200k SALT) when a pool is whitelisted. The contract's addSALTRewards function allows for the addition of SALT rewards for later distribution to whitelisted pools, but it does not specify any initial bootstrapping rewards upon whitelisting. The whitelisting mechanism and initial reward distribution are not part of the contract logic presented."
    },
    {
      "file": "repo_check/ico/salty/2024-01-salty/src/rewards/SaltRewards.sol",
      "isImp": true,
      "reason": "The smart contract does include a function 'sendInitialSaltRewards()' which is designed to send an initial distribution of rewards when a pool is whitelisted. It sends a specified 'liquidityBootstrapAmount' evenly across the whitelisted pool IDs provided in the 'poolIDs' array. This matches the description's mention of 'Bootstrapping Rewards (200k SALT per pool)' established when a pool is whitelisted. However, the exact amount of 200k SALT per pool is not hardcoded in the function; it's determined by the input 'liquidityBootstrapAmount', which needs to be set correctly when the function is called."
    },
    {
      "file": "repo_check/ico/salty/2024-01-salty/src/staking/StakingConfig.sol",
      "isImp": false,
      "reason": "The provided Smart Contract code does not include any functionality or references to 'Bootstrapping Rewards' or the establishment of such rewards upon the whitelisting of a pool. The contract focuses on configuration parameters for staking, such as 'minUnstakeWeeks', 'maxUnstakeWeeks', 'minUnstakePercent', and 'modificationCooldown', with corresponding functions to adjust these values. There are no functions or variables related to the distribution or management of rewards, bootstrapping or otherwise."
    },
    {
      "file": "repo_check/ico/salty/2024-01-salty/src/staking/StakingRewards.sol",
      "isImp": false,
      "reason": "The smart contract does not contain any specific logic to automatically add 200k SALT tokens as bootstrapping rewards when a pool is whitelisted. The contract provides functionality to add rewards to pools via the addSALTRewards function, but it does not mention or implement a fixed amount of 200k SALT for bootstrapping rewards upon pool whitelisting."
    }
  ],
  "The SALT token is an ERC20 utility and governance token on Ethereum with a 100 million maximum supply.": [
    {
      "file": "repo_check/ico/salty/2024-01-salty/src/dao/DAO.sol",
      "isImp": false,
      "reason": "The smart contract provided does not define the tokenomics of the SALT token, including its maximum supply or its nature as an ERC20 utility and governance token."
    },
    {
      "file": "repo_check/ico/salty/2024-01-salty/src/dao/DAOConfig.sol",
      "isImp": false,
      "reason": "The provided smart contract does not define the maximum supply of the SALT token or its status as an ERC20 utility and governance token on Ethereum. Those specifics would typically be implemented in the token contract itself, not in a contract dealing with DAO configuration and governance parameters."
    },
    {
      "file": "repo_check/ico/salty/2024-01-salty/src/dao/Parameters.sol",
      "isImp": false,
      "reason": "The smart contract code provided does not include any implementation of an ERC20 token or mention a SALT token with a capped maximum supply. The contract focuses on various parameter configurations for a DeFi platform, not tokenomics."
    },
    {
      "file": "repo_check/ico/salty/2024-01-salty/src/launch/Airdrop.sol",
      "isImp": false,
      "reason": "The smart contract provided is an Airdrop contract designed to facilitate the distribution of SALT tokens to authorized users who have retweeted the launch announcement and voted. It does not implement the functionality of the SALT token itself, such as tokenomics, ERC20 compatibility, or details concerning the total token supply. The contract interacts with a presumed ERC20 token through an interface (ISalt), but it is not the contract that defines the SALT token's properties such as maximum supply."
    },
    {
      "file": "repo_check/ico/salty/2024-01-salty/src/launch/BootstrapBallot.sol",
      "isImp": false,
      "reason": "The provided smart contract BootstrapBallot does not implement or mention the SALT token or its tokenomics, such as it being an ERC20 utility and governance token with a 100 million maximum supply. The contract focuses on voting for the start of an exchange and managing an airdrop process without any reference to ERC20 token implementation or token supply details."
    },
    {
      "file": "repo_check/ico/salty/2024-01-salty/src/launch/InitialDistribution.sol",
      "isImp": true,
      "reason": "The smart contract imports the ERC20 standard and initializes the salt token, which implies that it is an ERC20 token as per the description of the SALT token being an ERC20 utility and governance token."
    },
    {
      "file": "repo_check/ico/salty/2024-01-salty/src/rewards/RewardsConfig.sol",
      "isImp": true,
      "reason": "The provided smart contract code does not implement tokenomics related to the SALT token's maximum supply or its status as an ERC20 utility and governance token. The contract is focused on the rewards configuration for the SALT token distribution, such as the rewards emitter daily percent, emissions weekly percent, staking rewards percent, and percent rewards for SALT/USDS pool, but it does not handle token supply or token type specifications."
    },
    {
      "file": "repo_check/ico/salty/2024-01-salty/src/rewards/RewardsEmitter.sol",
      "isImp": false,
      "reason": "The provided smart contract code defines the RewardsEmitter contract, which is responsible for handling SALT token rewards distribution to staking and liquidity participants. It does not implement an ERC20 token itself or enforce the maximum token supply of 100 million, but rather interacts with an existing ERC20 token, presumably the SALT token, via the SafeERC20 library. The source code for the actual ERC20 implementation of the SALT token and its tokenomics is not included."
    },
    {
      "file": "repo_check/ico/salty/2024-01-salty/src/rewards/SaltRewards.sol",
      "isImp": false,
      "reason": "The provided Smart Contract code does not specify the SALT token supply or tokenomics related to the total supply or the nature of the token (utility and governance). It focuses on the distribution of rewards."
    },
    {
      "file": "repo_check/ico/salty/2024-01-salty/src/staking/StakingConfig.sol",
      "isImp": false,
      "reason": "The provided smart contract script does not include any implementation related to the SALT token being an ERC20 token or any tokenomics such as the 100 million maximum supply. It is a configuration contract for staking parameters only."
    },
    {
      "file": "repo_check/ico/salty/2024-01-salty/src/staking/StakingRewards.sol",
      "isImp": false,
      "reason": "The provided smart contract does not specify any functionalities related to the ERC20 token itself, such as token definition, total supply, or governance features. It is a staking contract for the SALT token that handles staking, reward calculations, and reward distributions, but it does not contain the implementation details of the SALT token nor information about its maximum supply."
    }
  ]
}